#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç TaskSelectorAgent –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
"""

import asyncio
import os
import sys
import tempfile
import json
from unittest.mock import AsyncMock, patch

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskSelectorAgent, TaskManagementAgent
from task_database import TaskDatabase

async def test_task_selector_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ TaskSelectorAgent –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –≤—ã–∑–æ–≤–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ TaskSelectorAgent")
    print("=" * 60)
    
    # Mock tasks
    test_tasks = [
        {
            "id": "task-1",
            "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
            "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "status": "pending",
            "priority": "high"
        },
        {
            "id": "task-2", 
            "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ω–∞ Q2",
            "description": "–ü–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
            "status": "pending",
            "priority": "medium"
        },
        {
            "id": "task-3",
            "title": "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
            "description": "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω",
            "status": "pending", 
            "priority": "low"
        }
    ]
    
    # Mock different LLM responses
    mock_responses = {
        "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": {
            "action": "delete",
            "selected_tasks": [
                {
                    "task_id": "task-1",
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                    "confidence": 0.8,
                    "reasoning": "–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'"
                },
                {
                    "task_id": "task-2",
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ω–∞ Q2", 
                    "confidence": 0.8,
                    "reasoning": "–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤—É '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'"
                }
            ],
            "requires_confirmation": True,
            "suggested_response": "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–æ —Å–ª–æ–≤–æ–º '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è'. –£—Ç–æ—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä."
        },
        "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–∞–Ω–∫–∞": {
            "action": "delete",
            "selected_tasks": [
                {
                    "task_id": "task-1",
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                    "confidence": 0.95,
                    "reasoning": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è' –∏ '–±–∞–Ω–∫–∞'"
                }
            ],
            "requires_confirmation": True,
            "suggested_response": "–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"
        },
        "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏": {
            "action": "view",
            "selected_tasks": [],
            "requires_confirmation": False,
            "suggested_response": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }
    }
    
    # Test scenarios
    test_scenarios = [
        "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
        "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–∞–Ω–∫–∞", 
        "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏"
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüß™ –¢–ï–°–¢ {i}: {scenario}")
        print("-" * 50)
        
        expected_response = mock_responses.get(scenario, {})
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∞–Ω–∞–ª–∏–∑:")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {expected_response.get('action', 'unknown')}")
        print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(expected_response.get('selected_tasks', []))}")
        print(f"   –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {expected_response.get('requires_confirmation', True)}")
        
        if expected_response.get('selected_tasks'):
            print(f"   üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in expected_response['selected_tasks']:
                print(f"     ‚Ä¢ {task.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {task.get('confidence', 0):.2f})")
        
        print(f"   üí¨ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {expected_response.get('suggested_response', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

async def test_task_management_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskManagementAgent —Å –º–æ–∫–æ–º TaskSelectorAgent"""
    
    print("\n\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskManagementAgent")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        
        # Create task agent with mocked selector
        task_agent = TaskManagementAgent(api_key="mock-key", model="gpt-4")
        task_agent.db = db
        
        # Mock the task selector response
        mock_analysis = {
            "action": "delete",
            "selected_tasks": [
                {
                    "task_id": "test-task-id",
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                    "confidence": 0.95,
                    "reasoning": "–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
                }
            ],
            "requires_confirmation": True,
            "suggested_response": "–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        }
        
        # Patch the task selector
        with patch.object(task_agent.task_selector, 'analyze_user_intent', new_callable=AsyncMock) as mock_analyze:
            mock_analyze.return_value = mock_analysis
            
            user_id = 123456
            
            # Create test task
            db.ensure_user_exists(user_id)
            task_id = db.create_task(
                user_id=user_id,
                title="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                description="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", 
                priority="high"
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
            
            # Test the workflow
            message = "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
            print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
            
            context = {"conversation_history": []}
            
            # This should call our mocked task selector
            response = await task_agent.process_message(user_id, message, context)
            print(f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response}")
            
            # Verify the mock was called
            mock_analyze.assert_called_once()
            args, kwargs = mock_analyze.call_args
            print(f"\n‚úÖ TaskSelectorAgent –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {args[0] if args else kwargs.get('user_message', '–Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(args[1]) if len(args) > 1 else len(kwargs.get('tasks', []))}")
            
            # Check if response contains confirmation request
            if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in response.lower() or "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ" in response.lower():
                print("‚úÖ –ë–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            else:
                print(f"‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {response}")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_task_selector_logic())
    asyncio.run(test_task_management_integration())