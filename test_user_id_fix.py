#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å user_id
"""

import asyncio
import os
import sys
import tempfile
import json

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskManagementAgent, OrchestratorAgent
from task_database import TaskDatabase

async def test_user_id_handling():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ user_id —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ user_id")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        orchestrator = OrchestratorAgent(api_key="test-key", model="gpt-4")
        
        # Real Telegram user ID
        real_user_id = 602216
        
        print(f"üÜî –¢–µ—Å—Ç–æ–≤—ã–π user_id: {real_user_id} (—Ç–∏–ø: {type(real_user_id)})")
        
        # Test 1: Direct database operations
        print("\nüìä –¢–ï–°–¢ 1: –ü—Ä—è–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π")
        print("-" * 40)
        
        success = db.ensure_user_exists(real_user_id)
        print(f"‚úÖ ensure_user_exists: {success}")
        
        task_id = db.create_task(
            user_id=real_user_id,
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ user_id", 
            priority="medium"
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
        
        tasks = db.get_tasks(real_user_id)
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        if tasks:
            print(f"   –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ user_id: {tasks[0]['user_id']} (—Ç–∏–ø: {type(tasks[0]['user_id'])})")
        
        # Test 2: TaskManagementAgent direct call
        print("\nüìä –¢–ï–°–¢ 2: TaskManagementAgent –Ω–∞–ø—Ä—è–º—É—é")
        print("-" * 40)
        
        task_agent = TaskManagementAgent(api_key="test-key", model="gpt-4")
        
        # Test the _create_task method directly
        create_params = json.dumps({
            "user_id": real_user_id,
            "title": "–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞",
            "description": "–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞",
            "priority": "high"
        })
        
        result = task_agent._create_task(create_params)
        print(f"üîß –†–µ–∑—É–ª—å—Ç–∞—Ç _create_task: {result[:100]}...")
        
        # Test get_tasks
        get_params = json.dumps({"user_id": real_user_id})
        result = task_agent._get_tasks(get_params)
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç _get_tasks: {result[:100]}...")
        
        # Test 3: Check what LangChain might be doing
        print("\nüìä –¢–ï–°–¢ 3: –°–∏–º—É–ª—è—Ü–∏—è LangChain –≤—ã–∑–æ–≤–∞")
        print("-" * 40)
        
        # Simulate what LangChain might pass to _create_task
        possible_bad_params = [
            '{"user_id": "user_1", "title": "Bad test"}',  # String user_id
            '{"user_id": "602216", "title": "String ID test"}',  # String number
            '{"title": "No user_id test"}',  # Missing user_id
        ]
        
        for bad_params in possible_bad_params:
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–æ—Ö–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {bad_params}")
            try:
                result = task_agent._create_task(bad_params)
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:80]}...")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # Test 4: Check orchestrator flow (without real LLM)
        print("\nüìä –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("-" * 40)
        
        # Check user state retrieval 
        user_state = await orchestrator._get_user_state(real_user_id)
        print(f"üë§ User state –¥–ª—è {real_user_id}: {user_state}")
        
        # Final verification
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        print("-" * 40)
        
        final_tasks = db.get_tasks(real_user_id)
        print(f"üìã –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è user {real_user_id}: {len(final_tasks)}")
        
        for i, task in enumerate(final_tasks, 1):
            print(f"   {i}. {task['title']} (user_id: {task['user_id']}, —Ç–∏–ø: {type(task['user_id'])})")
            
        # Check for wrong user_id
        wrong_tasks = db.get_tasks(1)  # user_1 would be stored as 1
        print(f"üìã –ó–∞–¥–∞—á –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id=1: {len(wrong_tasks)}")
        
        if wrong_tasks:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å –∑–∞–¥–∞—á–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id!")
            for task in wrong_tasks:
                print(f"   - {task['title']} (user_id: {task['user_id']})")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_user_id_handling())