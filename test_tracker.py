import unittest
from unittest.mock import patch, MagicMock
import tempfile
import os
import yaml
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

# –ú–æ–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
with patch('tracker.create_logger') as mock_logger:
    mock_logger.return_value = MagicMock()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞
    from tracker import (
        TrackerUserData, TrackerTask, TaskStatus, TaskPriority,
        create_task, get_task_by_id, update_task_status, 
        update_task_priority, delete_task, get_tasks_by_status,
        get_tasks_sorted, format_task_text,
        save_user_data, get_user_data
    )

class TestTrackerFunctions(unittest.TestCase):
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False)
        self.temp_file.close()
        
        # –ü–∞—Ç—á–∏–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
        self.patcher = patch('tracker.TRACKER_STORAGE', Path(self.temp_file.name))
        self.patcher.start()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data = TrackerUserData(123)
        self.user_data.completed = True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º welcome module
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.patcher.stop()
        try:
            os.unlink(self.temp_file.name)
        except:
            pass
    
    def test_create_task(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", TaskPriority.HIGH)
        
        self.assertEqual(task.title, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        self.assertEqual(task.description, "–û–ø–∏—Å–∞–Ω–∏–µ")
        self.assertEqual(task.priority, TaskPriority.HIGH)
        self.assertEqual(task.status, TaskStatus.PENDING)
        self.assertEqual(len(self.user_data.tasks), 1)
        self.assertIsNotNone(task.id)
        self.assertIsNotNone(task.created_at)
    
    def test_get_task_by_id(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        
        found_task = get_task_by_id(self.user_data, task.id)
        self.assertEqual(found_task.title, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        
        not_found = get_task_by_id(self.user_data, "non-existent-id")
        self.assertIsNone(not_found)
    
    def test_update_task_status(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        
        # –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
        result = update_task_status(self.user_data, task.id, TaskStatus.IN_PROGRESS)
        self.assertTrue(result)
        self.assertEqual(task.status, TaskStatus.IN_PROGRESS)
        
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        result = update_task_status(self.user_data, task.id, TaskStatus.COMPLETED)
        self.assertTrue(result)
        self.assertEqual(task.status, TaskStatus.COMPLETED)
        self.assertIsNotNone(task.completed_at)
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        result = update_task_status(self.user_data, "non-existent", TaskStatus.COMPLETED)
        self.assertFalse(result)
    
    def test_update_task_priority(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        original_priority = task.priority
        
        result = update_task_priority(self.user_data, task.id, TaskPriority.URGENT)
        self.assertTrue(result)
        self.assertEqual(task.priority, TaskPriority.URGENT)
        self.assertNotEqual(task.priority, original_priority)
        
        # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        result = update_task_priority(self.user_data, "non-existent", TaskPriority.HIGH)
        self.assertFalse(result)
    
    def test_delete_task(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        task_id = task.id
        
        self.assertEqual(len(self.user_data.tasks), 1)
        
        result = delete_task(self.user_data, task_id)
        self.assertTrue(result)
        self.assertEqual(len(self.user_data.tasks), 0)
        
        # –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        result = delete_task(self.user_data, task_id)
        self.assertFalse(result)
    
    def test_get_tasks_by_status(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        task1 = create_task(self.user_data, "–ó–∞–¥–∞—á–∞ 1")
        task2 = create_task(self.user_data, "–ó–∞–¥–∞—á–∞ 2")
        task3 = create_task(self.user_data, "–ó–∞–¥–∞—á–∞ 3")
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        update_task_status(self.user_data, task2.id, TaskStatus.IN_PROGRESS)
        update_task_status(self.user_data, task3.id, TaskStatus.COMPLETED)
        
        pending_tasks = get_tasks_by_status(self.user_data, TaskStatus.PENDING)
        in_progress_tasks = get_tasks_by_status(self.user_data, TaskStatus.IN_PROGRESS)
        completed_tasks = get_tasks_by_status(self.user_data, TaskStatus.COMPLETED)
        
        self.assertEqual(len(pending_tasks), 1)
        self.assertEqual(len(in_progress_tasks), 1)
        self.assertEqual(len(completed_tasks), 1)
        self.assertEqual(pending_tasks[0].title, "–ó–∞–¥–∞—á–∞ 1")
        self.assertEqual(in_progress_tasks[0].title, "–ó–∞–¥–∞—á–∞ 2")
        self.assertEqual(completed_tasks[0].title, "–ó–∞–¥–∞—á–∞ 3")
    
    def test_get_tasks_sorted(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á"""
        task1 = create_task(self.user_data, "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "", TaskPriority.LOW)
        task2 = create_task(self.user_data, "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "", TaskPriority.HIGH)
        task3 = create_task(self.user_data, "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞", "", TaskPriority.URGENT)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_tasks = get_tasks_sorted(self.user_data, "priority")
        self.assertEqual(sorted_tasks[0].title, "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞")
        self.assertEqual(sorted_tasks[1].title, "–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        self.assertEqual(sorted_tasks[2].title, "–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        sorted_by_date = get_tasks_sorted(self.user_data, "created_at")
        self.assertEqual(len(sorted_by_date), 3)
    
    def test_format_task_text(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏"""
        task = create_task(self.user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", TaskPriority.HIGH)
        
        # –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        short_text = format_task_text(task, show_details=False)
        self.assertIn("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", short_text)
        self.assertIn("‚è≥", short_text)  # Emoji –¥–ª—è pending —Å—Ç–∞—Ç—É—Å–∞
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        detailed_text = format_task_text(task, show_details=True)
        self.assertIn("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", detailed_text)
        self.assertIn("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", detailed_text)
        self.assertIn("üü† –í—ã—Å–æ–∫–∏–π", detailed_text)  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.assertIn("–°–æ–∑–¥–∞–Ω–∞:", detailed_text)
    
    def test_data_persistence(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        task1 = create_task(self.user_data, "–ó–∞–¥–∞—á–∞ 1", "–û–ø–∏—Å–∞–Ω–∏–µ 1", TaskPriority.HIGH)
        task2 = create_task(self.user_data, "–ó–∞–¥–∞—á–∞ 2", "–û–ø–∏—Å–∞–Ω–∏–µ 2", TaskPriority.LOW)
        update_task_status(self.user_data, task1.id, TaskStatus.IN_PROGRESS)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_user_data(self.user_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        loaded_user_data = get_user_data(123)
        
        self.assertEqual(len(loaded_user_data.tasks), 2)
        self.assertEqual(loaded_user_data.tasks[0].title, "–ó–∞–¥–∞—á–∞ 1")
        self.assertEqual(loaded_user_data.tasks[0].status, TaskStatus.IN_PROGRESS)
        self.assertEqual(loaded_user_data.tasks[0].priority, TaskPriority.HIGH)
        self.assertEqual(loaded_user_data.tasks[1].title, "–ó–∞–¥–∞—á–∞ 2")
        self.assertEqual(loaded_user_data.tasks[1].priority, TaskPriority.LOW)

if __name__ == '__main__':
    unittest.main()