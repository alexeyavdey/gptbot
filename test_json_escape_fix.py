#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ TaskSelectorAgent
"""

import asyncio
import os
import sys
import tempfile
import json

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskSelectorAgent
from task_database import TaskDatabase

async def test_json_escaping():
    """–¢–µ—Å—Ç —á—Ç–æ JSON –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ TaskSelectorAgent")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        selector = TaskSelectorAgent(api_key="test-key", model="gpt-4")
        
        user_id = 123456
        
        # Create test tasks
        db.ensure_user_exists(user_id)
        task_id = db.create_task(
            user_id=user_id,
            title="–°–¥–µ–ª–∞—Ç—å –±—ç–∫–ª–æ–≥",
            description="—Å–∫–≤–æ–∑–Ω–æ–π –±—ç–∫–ª–æ–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏", 
            priority="high"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
        
        # Get tasks for analysis
        tasks = db.get_tasks(user_id)
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        # Test the JSON escaping logic manually
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è JSON:")
        
        tasks_info = []
        for task in tasks:
            tasks_info.append({
                "task_id": task['id'],
                "title": task['title'], 
                "description": task.get('description', ''),
                "status": task['status'],
                "priority": task['priority']
            })
        
        # Original JSON (would cause error)
        original_json = json.dumps(tasks_info, ensure_ascii=False, indent=2)
        print("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π JSON:")
        print(original_json[:200] + "...")
        
        # Escaped JSON (should work)
        escaped_json = original_json.replace('{', '{{').replace('}', '}}')
        print("\n–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:")
        print(escaped_json[:200] + "...")
        
        # Count problematic characters
        original_braces = original_json.count('{') + original_json.count('}')
        escaped_braces = escaped_json.count('{{') + escaped_json.count('}}')
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –§–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: {original_braces}")
        print(f"   –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫: {escaped_braces}")
        
        if escaped_braces > 0:
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
        
        # Test that the method doesn't crash (without real API call)
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ analyze_user_intent (–±–µ–∑ API):")
        
        try:
            # This will fail on API call but shouldn't fail on JSON escaping
            user_message = "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∏"
            conversation_history = []
            
            # Simulate the logic up to the API call
            tasks_json = json.dumps(tasks_info, ensure_ascii=False, indent=2).replace('{', '{{').replace('}', '}}')
            
            context_info = ""
            if conversation_history:
                context_info = "\n".join([
                    f"{msg.get('role', 'user')}: {msg.get('content', '')}" 
                    for msg in conversation_history[-5:]
                ])
            
            analysis_prompt = f"""
            –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_message}

            –°–ü–ò–°–û–ö –ó–ê–î–ê–ß:
            {tasks_json}

            –ö–û–ù–¢–ï–ö–°–¢ –†–ê–ó–ì–û–í–û–†–ê:
            {context_info}

            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Ä–Ω–∏ JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞.
            """
            
            print("‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("üìù –§—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞:")
            print(analysis_prompt[:300] + "...")
            
        except Exception as e:
            if "missing variables" in str(e):
                print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print(f"–û—à–∏–±–∫–∞: {e}")
            else:
                print("‚úÖ –û—à–∏–±–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç (–¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞)")
                print(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ API: {e}")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_json_escaping())