#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á —Å TaskSelectorAgent
"""

import asyncio
import os
import sys
import tempfile
import json

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskSelectorAgent, TaskManagementAgent
from task_database import TaskDatabase

async def test_task_selector_agent():
    """–¢–µ—Å—Ç TaskSelectorAgent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskSelectorAgent")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        api_key = os.getenv('API_KEY') or 'test-key'
        selector = TaskSelectorAgent(api_key=api_key, model="gpt-4")
        
        user_id = 123456
        
        # Create test tasks
        db.ensure_user_exists(user_id)
        
        test_tasks = [
            {"title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞", "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", "priority": "high", "status": "pending"},
            {"title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ω–∞ Q2", "description": "–ü–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞", "priority": "medium", "status": "pending"},
            {"title": "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "description": "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω", "priority": "low", "status": "pending"},
            {"title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º", "description": "–û–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "priority": "high", "status": "in_progress"}
        ]
        
        tasks_with_ids = []
        for task_data in test_tasks:
            task_id = db.create_task(
                user_id=user_id,
                title=task_data["title"],
                description=task_data["description"], 
                priority=task_data["priority"]
            )
            task_data['id'] = task_id
            tasks_with_ids.append(task_data)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {task_data['title']}")
        
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks_with_ids)}")
        
        # Test scenarios
        test_scenarios = [
            {
                "name": "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é",
                "message": "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
                "conversation_history": []
            },
            {
                "name": "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏",
                "message": "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–∞–Ω–∫–∞",
                "conversation_history": []
            },
            {
                "name": "–£–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                "message": "–¥–∞–≤–∞–π –µ—ë —É–¥–∞–ª–∏–º",
                "conversation_history": [
                    {"role": "user", "content": "–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"},
                    {"role": "assistant", "content": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞"}
                ]
            },
            {
                "name": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á",
                "message": "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏",
                "conversation_history": []
            },
            {
                "name": "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                "message": "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç",
                "conversation_history": []
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\n" + "="*60)
            print(f"–¢–ï–°–¢ {i}: {scenario['name']}")
            print("="*60)
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario['message']}")
            
            # Analyze intent
            result = await selector.analyze_user_intent(
                user_message=scenario['message'],
                tasks=tasks_with_ids,
                conversation_history=scenario['conversation_history']
            )
            
            print(f"ü§ñ –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:")
            print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {result.get('action', 'unknown')}")
            print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(result.get('selected_tasks', []))}")
            print(f"   –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result.get('requires_confirmation', True)}")
            
            if result.get('selected_tasks'):
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                for task in result['selected_tasks']:
                    print(f"     ‚Ä¢ {task.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {task.get('confidence', 0):.2f})")
                    print(f"       –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {task.get('reasoning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            
            if result.get('suggested_response'):
                print(f"   üí¨ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {result['suggested_response'][:100]}...")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

async def test_full_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskManagementAgent —Å TaskSelectorAgent"""
    
    print("\n\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        api_key = os.getenv('API_KEY') or 'test-key'
        task_agent = TaskManagementAgent(api_key=api_key, model="gpt-4")
        task_agent.db = db  # Set database
        
        user_id = 123456
        
        # Create test task
        db.ensure_user_exists(user_id)
        task_id = db.create_task(
            user_id=user_id,
            title="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
            description="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –í–ª–∞–¥–∞", 
            priority="high"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
        
        # Test deletion workflow
        print("\nüìã –°–¶–ï–ù–ê–†–ò–ô: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ LLM –∞–Ω–∞–ª–∏–∑")
        print("-" * 60)
        
        # Step 1: User asks to delete task
        message1 = "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message1}")
        
        context = {
            "conversation_history": []
        }
        
        response1 = await task_agent.process_message(user_id, message1, context)
        print(f"ü§ñ –ë–æ—Ç: {response1}")
        
        # Check if it requires confirmation
        if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in response1.lower() or "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ" in response1.lower():
            print("\n‚úÖ LLM –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∑–∞–¥–∞—á—É –∏ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            
            # Extract task_id from response
            import re
            uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
            task_ids = re.findall(uuid_pattern, response1.lower())
            
            if task_ids:
                extracted_task_id = task_ids[0]
                print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω task_id: {extracted_task_id}")
                
                # Step 2: User confirms
                message2 = "–¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message2}")
                
                context2 = {
                    "task_id": extracted_task_id,
                    "conversation_history": [
                        {"role": "user", "content": message1},
                        {"role": "assistant", "content": response1}
                    ]
                }
                
                response2 = await task_agent.process_message(user_id, message2, context2)
                print(f"ü§ñ –ë–æ—Ç: {response2}")
                
                # Check final state
                final_tasks = db.get_tasks(user_id)
                
                if len(final_tasks) == 0:
                    print("\nüéâ –£–°–ü–ï–•! –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    print("‚úÖ TaskSelectorAgent –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–∞–º–µ—Ä–µ–Ω–∏–µ")
                    print("‚úÖ TaskManagementAgent –≤—ã–ø–æ–ª–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")
                else:
                    print("\n‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å task_id –∏–∑ –æ—Ç–≤–µ—Ç–∞")
        else:
            print("‚ùå LLM –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_task_selector_agent())
    asyncio.run(test_full_integration())