#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
"""

import asyncio
import os
import sys
import tempfile
import json
from unittest.mock import AsyncMock, patch

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import OrchestratorAgent, TaskManagementAgent
from task_database import TaskDatabase

async def test_deletion_confirmation_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        orchestrator = OrchestratorAgent(api_key="mock-key", model="gpt-4")
        
        user_id = 123456
        
        # Create test task
        db.ensure_user_exists(user_id)
        task_id = db.create_task(
            user_id=user_id,
            title="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
            description="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", 
            priority="high"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
        
        # Mock the task selector to simulate finding the task
        mock_analysis_step1 = {
            "action": "delete",
            "selected_tasks": [
                {
                    "task_id": task_id,
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                    "confidence": 0.95,
                    "reasoning": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                }
            ],
            "requires_confirmation": True,
            "suggested_response": "–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"
        }
        
        mock_analysis_step2 = {
            "action": "delete", 
            "selected_tasks": [
                {
                    "task_id": task_id,
                    "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
                    "confidence": 1.0,
                    "reasoning": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
                }
            ],
            "requires_confirmation": False,  # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
            "suggested_response": "–í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ"
        }
        
        print("\nüìã –≠–¢–ê–ü 1: –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è")
        print("-" * 40)
        
        # Patch the task selector
        with patch.object(orchestrator.task_agent.task_selector, 'analyze_user_intent', new_callable=AsyncMock) as mock_analyze:
            mock_analyze.return_value = mock_analysis_step1
            
            # Step 1: Request deletion
            message1 = "—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞ (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)"
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message1}")
            
            result1 = await orchestrator.route_request(user_id, message1)
            print(f"ü§ñ –ë–æ—Ç: {result1['response'][:100]}...")
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞:")
            print(f"   –ê–≥–µ–Ω—Ç: {result1['agent']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result1['confidence']}")
            
            # Verify tasks still exist
            tasks_after_step1 = db.get_tasks(user_id)
            print(f"üìä –ó–∞–¥–∞—á –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞: {len(tasks_after_step1)}")
            
            if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in result1['response'].lower():
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            else:
                print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        
        print("\nüìã –≠–¢–ê–ü 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        print("-" * 40)
        
        # Step 2: Confirm deletion
        with patch.object(orchestrator.task_agent.task_selector, 'analyze_user_intent', new_callable=AsyncMock) as mock_analyze:
            mock_analyze.return_value = mock_analysis_step2
            
            message2 = "–¥–∞"
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message2}")
            
            # Check if it's detected as confirmation
            is_confirmation = orchestrator._is_deletion_confirmation(message2)
            print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {is_confirmation}")
            
            # Extract task_id (should be None for simple "–¥–∞")
            extracted_id = orchestrator._extract_task_id_from_message(message2)
            print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω task_id: {extracted_id}")
            
            result2 = await orchestrator.route_request(user_id, message2)
            print(f"ü§ñ –ë–æ—Ç: {result2['response'][:100]}...")
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞:")
            print(f"   –ê–≥–µ–Ω—Ç: {result2['agent']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result2['confidence']}")
            print(f"   –õ–æ–≥–∏–∫–∞: {result2['reasoning']}")
            
            # Check final state
            tasks_after_step2 = db.get_tasks(user_id)
            print(f"üìä –ó–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(tasks_after_step2)}")
            
            if len(tasks_after_step2) == 0:
                print("üéâ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            elif "—É–¥–∞–ª–µ–Ω–∞" in result2['response'].lower():
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–∏–ª–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–∑—É)")
                if len(tasks_after_step2) == 0:
                    print("üéâ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ó–∞–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print("‚ùå –ó–∞–¥–∞—á–∞ –ù–ï —É–¥–∞–ª–µ–Ω–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            else:
                print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_deletion_confirmation_flow())