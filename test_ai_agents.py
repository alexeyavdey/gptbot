"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–∫–µ—Ä–∞
"""

import asyncio
import json
from unittest.mock import AsyncMock, MagicMock
from ai_agents import TaskManagerAgent, EveningTrackerAgent, OrchestratorAgent, initialize_agents

# –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

async def test_task_manager_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskManagerAgent...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ API –∫–ª—é—á–∞
    api_key = "test_key"
    
    try:
        # –ú–æ–∫–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        agent = TaskManagerAgent(api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        create_params = json.dumps({
            "user_id": 123,
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏",
            "priority": "high"
        })
        
        result = agent._create_task(create_params)
        result_data = json.loads(result)
        
        if result_data["success"]:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: OK")
            task_id = result_data["task_id"]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
            get_params = json.dumps({"user_id": 123})
            tasks_result = agent._get_tasks(get_params)
            tasks_data = json.loads(tasks_result)
            
            if tasks_data["success"] and len(tasks_data["tasks"]) > 0:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á: OK")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                update_params = json.dumps({
                    "user_id": 123,
                    "task_id": task_id,
                    "new_status": "in_progress"
                })
                
                update_result = agent._update_task_status(update_params)
                update_data = json.loads(update_result)
                
                if update_data["success"]:
                    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: OK")
                else:
                    print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: FAILED")
            else:
                print("‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á: FAILED")
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: FAILED")
            
    except Exception as e:
        print(f"‚ùå TaskManagerAgent —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")


async def test_evening_tracker_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EveningTrackerAgent...")
    
    api_key = "test_key"
    
    try:
        agent = EveningTrackerAgent(api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏
        session_result = await agent.start_evening_session(123)
        
        if session_result["success"]:
            print("‚úÖ –ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏: OK")
        else:
            print(f"‚ùå –ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏: {session_result.get('error', 'FAILED')}")
            
    except Exception as e:
        print(f"‚ùå EveningTrackerAgent —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")


async def test_orchestrator_agent():
    """–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OrchestratorAgent...")
    
    api_key = "test_key"
    
    try:
        orchestrator = OrchestratorAgent(api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        test_requests = [
            ("—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É '–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ'", "TASK_MANAGER"),
            ("–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä", "EVENING_TRACKER"),
            ("–∫–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é?", "GENERAL")
        ]
        
        for request, expected_type in test_requests:
            try:
                result = await orchestrator.route_request(123, request)
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å '{request}' -> {result['agent']}")
            except Exception as e:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å '{request}' –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
                
    except Exception as e:
        print(f"‚ùå OrchestratorAgent —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")


async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—é —Å–∏—Å—Ç–µ–º—É
        api_key = "test_key"
        orchestrator = initialize_agents(api_key)
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤: OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        task_requests = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É '–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç' —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
            "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏",
            "–∏–∑–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ'",
            "–∫–∞–∫–∞—è —É –º–µ–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?"
        ]
        
        for request in task_requests:
            try:
                result = await orchestrator.route_request(123, request)
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞: '{request}' -> {result['agent']}")
            except Exception as e:
                print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ '{request}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")


def test_data_persistence():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    api_key = "test_key"
    
    try:
        agent = TaskManagerAgent(api_key)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—á—É
        user_data = agent._load_user_data(999)  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        if user_data is None:
            print("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ): OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        create_params = json.dumps({
            "user_id": 999,
            "title": "–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
        })
        
        result = agent._create_task(create_params)
        result_data = json.loads(result)
        
        if result_data["success"]:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: OK")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            loaded_data = agent._load_user_data(999)
            if loaded_data and len(loaded_data.tasks) > 0:
                print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: FAILED")
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: FAILED")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI-–∞–≥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–∫–µ—Ä–∞\n")
    
    await test_task_manager_agent()
    await test_evening_tracker_agent()
    await test_orchestrator_agent()
    await test_integration()
    test_data_persistence()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(run_all_tests())