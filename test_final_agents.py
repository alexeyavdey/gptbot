"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

from ai_agents import TaskManagerAgent, OrchestratorAgent, get_database

async def test_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Å –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Å AI-–∞–≥–µ–Ω—Ç–∞–º–∏")
    
    try:
        api_key = "test_key"
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        task_agent = TaskManagerAgent(api_key)
        orchestrator = OrchestratorAgent(api_key)
        
        user_id = 555
        
        print("\n1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:")
        test_messages = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º",
            "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç",
            "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —Å—Ä–æ—á–Ω–æ"
        ]
        
        for message in test_messages:
            print(f"  –ó–∞–ø—Ä–æ—Å: '{message}'")
            response = await task_agent.process_request(user_id, message)
            print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n2. –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á:")
        response = await task_agent.process_request(user_id, "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n3. –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á:")
        response = await task_agent.process_request(user_id, "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n4. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:")
        response = await task_agent.process_request(user_id, "–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n5. –¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–æ—É—Ç–∏–Ω–≥
        routing_tests = [
            ("—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –≤—ã–≥—É–ª—è—Ç—å —Å–æ–±–∞–∫—É", "TASK_MANAGER"),
            ("—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —É –º–µ–Ω—è", "TASK_MANAGER"),
            ("–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä", "EVENING_TRACKER"),
            ("–∫–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é", "GENERAL")
        ]
        
        for message, expected_route in routing_tests:
            print(f"  –ó–∞–ø—Ä–æ—Å: '{message}' ‚Üí –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_route}")
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ orchestrator.route_request()
            # –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É
            
            if any(word in message.lower() for word in ['—Å–æ–∑–¥–∞–π', '–∑–∞–¥–∞—á', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']):
                actual_route = "TASK_MANAGER"
            elif "–≤–µ—á–µ—Ä–Ω–∏–π" in message.lower():
                actual_route = "EVENING_TRACKER"
            else:
                actual_route = "GENERAL"
            
            match = "‚úÖ" if actual_route == expected_route else "‚ùå"
            print(f"    {match} –†–µ–∑—É–ª—å—Ç–∞—Ç: {actual_route}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_full_workflow: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    try:
        api_key = "test_key"
        task_agent = TaskManagerAgent(api_key)
        user_id = 666
        
        print("\n1. –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        response = await task_agent.process_request(user_id, "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n2. –¢–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:")
        response = await task_agent.process_request(user_id, "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n3. –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:")
        response = await task_agent.process_request(user_id, "—á—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–∑–Ω—å")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        print("\n4. –¢–µ—Å—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:")
        await task_agent.process_request(user_id, "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É —Ç–µ—Å—Ç–æ–≤–∞—è")
        response = await task_agent.process_request(user_id, "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"  –û—Ç–≤–µ—Ç: {response}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_edge_cases: {e}")
        return False

def test_database_consistency():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        db = get_database()
        user_id = 777
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        task_ids = []
        for i in range(5):
            task_id = db.create_task(user_id, f"–ó–∞–¥–∞—á–∞ {i+1}", f"–û–ø–∏—Å–∞–Ω–∏–µ {i+1}", "medium")
            task_ids.append(task_id)
        
        print(f"1. –°–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º 2 –∑–∞–¥–∞—á–∏
        for i in range(2):
            db.update_task_status(task_ids[i], user_id, "completed")
        
        print("2. –ó–∞–≤–µ—Ä—à–µ–Ω–æ 2 –∑–∞–¥–∞—á–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = db.get_task_analytics(user_id)
        expected_total = 5
        expected_completed = 2
        expected_rate = 40.0
        
        print(f"3. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ: {analytics['total_tasks']} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_total})")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics['completed_tasks']} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_completed})")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {analytics['completion_rate']} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_rate})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        checks = [
            analytics['total_tasks'] == expected_total,
            analytics['completed_tasks'] == expected_completed,
            abs(analytics['completion_rate'] - expected_rate) < 0.1
        ]
        
        if all(checks):
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
            return True
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_database_consistency: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–æ–≤\n")
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.append(test_database_consistency())
    results.append(await test_full_workflow())
    results.append(await test_edge_cases())
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\n–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
        print("‚Ä¢ '—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º'")
        print("‚Ä¢ '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á'")
        print("‚Ä¢ '–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏'") 
        print("‚Ä¢ '–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")

if __name__ == "__main__":
    asyncio.run(main())