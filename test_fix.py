#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
"""

import sys
import os
sys.path.insert(0, os.getcwd())

async def test_database_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–¥–∞—á"""
    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
    
    try:
        from task_database import get_database
        
        db = get_database()
        test_user_id = 999999  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –∑–∞–¥–∞—á
        
        print("\n1. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–¥–∞—á:")
        analytics = db.get_task_analytics(test_user_id)
        print(f"   –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {analytics}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ None
        required_fields = ['total_tasks', 'completed_tasks', 'in_progress_tasks', 'pending_tasks', 'completion_rate']
        
        for field in required_fields:
            value = analytics.get(field)
            if value is None:
                print(f"   ‚ùå –ü–æ–ª–µ {field} —Ä–∞–≤–Ω–æ None")
                return False
            else:
                print(f"   ‚úÖ {field}: {value}")
        
        print("\n2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        from enhanced_ai_agents import OrchestratorAgent
        
        orchestrator = OrchestratorAgent("test_key")
        user_state = await orchestrator._get_user_state(test_user_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_state}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        active_tasks = user_state.get('active_tasks', 0)
        if isinstance(active_tasks, int):
            print(f"   ‚úÖ active_tasks –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω—ã: {active_tasks}")
        else:
            print(f"   ‚ùå active_tasks –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {active_tasks}")
            return False
        
        print("\n3. –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ AI –º–µ–Ω—Ç–æ—Ä–∞:")
        context = await orchestrator.mentor_agent._get_user_context(test_user_id)
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç AI –º–µ–Ω—Ç–æ—Ä–∞: {context}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û—à–∏–±–∫–∞ —Å None –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_database_analytics())