#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ enhanced AI agents –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

# –ú–æ–∫–∞–µ–º aiogram types –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMessage:
    def __init__(self, text, user_id=12345):
        self.text = text
        self.md_text = text
        self.message_id = 1
        self.from_user = MockUser(user_id)
    
    async def answer(self, text):
        print(f"Bot response: {text}")

class MockUser:
    def __init__(self, user_id):
        self.id = user_id
        self.username = f"user_{user_id}"
        self.first_name = "Test"
        self.full_name = "Test User"

async def test_enhanced_agents_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ enhanced agents"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ enhanced AI agents –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞\n")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enhanced agents –Ω–∞–ø—Ä—è–º—É—é
        from enhanced_ai_agents import initialize_enhanced_agents
        from constants import GPT4_MODEL
        
        # –ú–æ–∫–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        api_key = "test_key"
        
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        orchestrator = initialize_enhanced_agents(api_key, GPT4_MODEL)
        
        if orchestrator:
            print("   ‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        print("\n2. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        
        test_cases = [
            ("—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", "TASK_MANAGEMENT"),
            ("—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á", "TASK_MANAGEMENT"), 
            ("–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä", "EVENING_TRACKER"),
            ("–∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º", "AI_MENTOR"),
            ("–Ω–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "NOTIFICATIONS")
        ]
        
        success_count = 0
        
        for message_text, expected_agent in test_cases:
            print(f"\n   –¢–µ—Å—Ç: '{message_text}'")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –∞–≥–µ–Ω—Ç: {expected_agent}")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
                mock_message = MockMessage(message_text)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ actions.py
                user_id = mock_message.from_user.id
                result = await orchestrator.route_request(user_id, message_text)
                
                routed_agent = result.get("agent", "unknown")
                confidence = result.get("confidence", 0)
                response = result.get("response", "")
                
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {routed_agent} (confidence: {confidence:.2f})")
                print(f"   –û—Ç–≤–µ—Ç: {response[:100]}...")
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                if any(expected_word in routed_agent.upper() for expected_word in expected_agent.split("_")):
                    print("   ‚úÖ –†–æ—É—Ç–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                    success_count += 1
                else:
                    print(f"   ‚ö†Ô∏è –†–æ—É—Ç–∏–Ω–≥ –Ω–µ—Ç–æ—á–Ω—ã–π (–æ–∂–∏–¥–∞–ª—Å—è {expected_agent})")
                    success_count += 0.5  # –ß–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞—á–µ—Ç
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"\n3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_cases)}")
        
        success_rate = success_count / len(test_cases)
        if success_rate >= 0.8:
            print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ API –∫–ª—é—á–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_message_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n")
    
    try:
        from enhanced_ai_agents import initialize_enhanced_agents
        from constants import GPT4_MODEL
        
        orchestrator = initialize_enhanced_agents("test_key", GPT4_MODEL)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤",
            "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –≤—Å–µ–≥–æ –∑–∞–¥–∞—á",
            "–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        ]
        
        for i, text in enumerate(test_messages, 1):
            print(f"{i}. –û–±—Ä–∞–±–æ—Ç–∫–∞: '{text}'")
            
            mock_message = MockMessage(text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await orchestrator.route_request(mock_message.from_user.id, text)
            print(f"   –ê–≥–µ–Ω—Ç: {result.get('agent')}")
            print(f"   –û—Ç–≤–µ—Ç: {result.get('response', '')[:100]}...")
            print()
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π flow —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º flow: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ enhanced AI agents\n")
    
    results = []
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–æ—É—Ç–∏–Ω–≥–∞
    results.append(await test_enhanced_agents_integration())
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow
    results.append(await test_message_flow())
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("üîß Enhanced AI agents –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ—Ç–µ!")
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:")
        print("‚Ä¢ üé≠ OrchestratorAgent - LLM —Ä–æ—É—Ç–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("‚Ä¢ üëã WelcomeAgent - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å")
        print("‚Ä¢ üìã TaskManagementAgent - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
        print("‚Ä¢ üîî NotificationAgent - —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("‚Ä¢ üåô EveningTrackerAgent - –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä")
        print("‚Ä¢ üß† AIMentorAgent - AI –º–µ–Ω—Ç–æ—Ä —Å –ø–∞–º—è—Ç—å—é")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")

if __name__ == "__main__":
    asyncio.run(main())