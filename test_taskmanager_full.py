#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —é–Ω–∏—Ç-—Ç–µ—Å—Ç TaskManagementAgent
–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–¥–∞—á–∏: —Å–æ–∑–¥–∞–Ω–∏–µ -> –ø—Ä–æ—Å–º–æ—Ç—Ä -> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> —É–¥–∞–ª–µ–Ω–∏–µ
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

async def test_taskmanager_lifecycle():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ TaskManagementAgent"""
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç TaskManagementAgent —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API")
    
    try:
        from enhanced_ai_agents import TaskManagementAgent
        from constants import GPT4_MODEL
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import env
        api_key = env.API_KEY or "your-openai-api-key-here"
        test_user_id = 999888777  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        print(f"1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskManagementAgent:")
        agent = TaskManagementAgent(api_key, GPT4_MODEL)
        print("   ‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        print(f"\n2. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
        existing_tasks = agent.db.get_tasks(test_user_id)
        for task in existing_tasks:
            agent.db.delete_task(task['id'], test_user_id)
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(existing_tasks)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á")
        
        print(f"\n3. –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        print("   –ó–∞–ø—Ä–æ—Å: '—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º'")
        result1 = await agent.process_task_request(test_user_id, "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º")
        print(f"   –û—Ç–≤–µ—Ç: {result1}")
        
        print(f"\n4. –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏")
        print("   –ó–∞–ø—Ä–æ—Å: '–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç'")
        result2 = await agent.process_task_request(test_user_id, "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç")
        print(f"   –û—Ç–≤–µ—Ç: {result2}")
        
        print(f"\n5. –¢–µ—Å—Ç 3: –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á")
        print("   –ó–∞–ø—Ä–æ—Å: '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á'")
        result3 = await agent.process_task_request(test_user_id, "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"   –û—Ç–≤–µ—Ç: {result3}")
        
        print(f"\n6. –¢–µ—Å—Ç 4: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
        print("   –ó–∞–ø—Ä–æ—Å: '–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏'")
        result4 = await agent.process_task_request(test_user_id, "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏")
        print(f"   –û—Ç–≤–µ—Ç: {result4}")
        
        print(f"\n7. –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print("   –ó–∞–ø—Ä–æ—Å: '–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'")
        result5 = await agent.process_task_request(test_user_id, "–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print(f"   –û—Ç–≤–µ—Ç: {result5}")
        
        print(f"\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ:")
        tasks_in_db = agent.db.get_tasks(test_user_id)
        print(f"   –ó–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(tasks_in_db)}")
        for i, task in enumerate(tasks_in_db, 1):
            print(f"   {i}. {task['title']} - {task['priority']} - {task['status']}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        if tasks_in_db:
            first_task_id = tasks_in_db[0]['id']
            first_task_title = tasks_in_db[0]['title']
            
            print(f"\n9. –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
            print(f"   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '{first_task_title}' –Ω–∞ 'in_progress'")
            update_result = agent.db.update_task_status(first_task_id, test_user_id, 'in_progress')
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if update_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            print(f"\n10. –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("    –ó–∞–ø—Ä–æ—Å: '–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏'")
            result6 = await agent.process_task_request(test_user_id, "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏")
            print(f"    –û—Ç–≤–µ—Ç: {result6}")
            
            print(f"\n11. –¢–µ—Å—Ç 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            print(f"    –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É '{first_task_title}'")
            complete_result = agent.db.update_task_status(first_task_id, test_user_id, 'completed')
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if complete_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            print(f"\n12. –¢–µ—Å—Ç 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            print("    –ó–∞–ø—Ä–æ—Å: '–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'")
            result7 = await agent.process_task_request(test_user_id, "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            print(f"    –û—Ç–≤–µ—Ç: {result7}")
            
            print(f"\n13. –¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            print(f"    –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É '{first_task_title}'")
            delete_result = agent.db.delete_task(first_task_id, test_user_id)
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if delete_result else '‚ùå –û—à–∏–±–∫–∞'}")
            
            print(f"\n14. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
            final_tasks = agent.db.get_tasks(test_user_id)
            print(f"    –ó–∞–¥–∞—á –æ—Å—Ç–∞–ª–æ—Å—å: {len(final_tasks)}")
            for task in final_tasks:
                print(f"    - {task['title']} ({task['status']})")
        
        print(f"\n15. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        remaining_tasks = agent.db.get_tasks(test_user_id)
        for task in remaining_tasks:
            agent.db.delete_task(task['id'], test_user_id)
        print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(remaining_tasks)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á")
        
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ LangChain")
        print(f"   ‚úÖ –ü–æ–¥—Å—á–µ—Ç –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á")
        print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SQLite –±–∞–∑–æ–π")
        print(f"   ‚úÖ LLM —Ä–æ—É—Ç–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print(f"\nüß™ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    
    try:
        from enhanced_ai_agents import TaskManagementAgent
        from constants import GPT4_MODEL
        
        api_key = env.API_KEY or "your-openai-api-key-here"
        test_user_id = 999888778  # –î—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        agent = TaskManagementAgent(api_key, GPT4_MODEL)
        
        print(f"1. –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print("   –ó–∞–ø—Ä–æ—Å: '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á'")
        result1 = await agent.process_task_request(test_user_id, "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"   –û—Ç–≤–µ—Ç: {result1}")
        
        print(f"\n2. –¢–µ—Å—Ç –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ:")
        print("   –ó–∞–ø—Ä–æ—Å: '—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É'")
        result2 = await agent.process_task_request(test_user_id, "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É")
        print(f"   –û—Ç–≤–µ—Ç: {result2}")
        
        print(f"\n3. –¢–µ—Å—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
        print("   –ó–∞–ø—Ä–æ—Å: '—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç'")
        result3 = await agent.process_task_request(test_user_id, "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç")
        print(f"   –û—Ç–≤–µ—Ç: {result3}")
        
        print(f"\n‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TaskManagementAgent")
    print("=" * 60)
    
    results = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    results.append(await test_taskmanager_lifecycle())
    
    # –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    results.append(await test_edge_cases())
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print("\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    
    if passed == total:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üîß TaskManagementAgent –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω:")
        print(f"   ‚Ä¢ LangChain –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   ‚Ä¢ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        print(f"   ‚Ä¢ SQLite –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())