#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskSelectorAgent —Å –≤–µ—á–µ—Ä–Ω–∏–º —Ç—Ä–µ–∫–µ—Ä–æ–º –∏ AI-–º–µ–Ω—Ç–æ—Ä–æ–º
"""

import asyncio
import os
import sys
import tempfile
import json
from unittest.mock import AsyncMock, patch

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import EveningTrackerAgent, AIMentorAgent, TaskSelectorAgent
from task_database import TaskDatabase

async def test_evening_tracker_task_context():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤ –≤–µ—á–µ—Ä–Ω–µ–º —Ç—Ä–µ–∫–µ—Ä–µ"""
    
    print("üåô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        evening_agent = EveningTrackerAgent(api_key="mock-key", model="gpt-4")
        evening_agent.db = db
        
        user_id = 123456
        
        # Create test tasks
        db.ensure_user_exists(user_id)
        
        task_ids = []
        test_tasks = [
            {"title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞", "description": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "priority": "high"},
            {"title": "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", "description": "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", "priority": "medium"},
            {"title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "description": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤", "priority": "low"}
        ]
        
        for task_data in test_tasks:
            task_id = db.create_task(
                user_id=user_id,
                title=task_data["title"],
                description=task_data["description"], 
                priority=task_data["priority"]
            )
            task_ids.append(task_id)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {task_data['title']}")
        
        # Test scenarios with mock responses
        test_scenarios = [
            {
                "name": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
                "message": "—è —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π —Å–µ–≥–æ–¥–Ω—è",
                "expected_task": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
                "mock_analysis": {
                    "action": "discuss_progress",
                    "selected_tasks": [
                        {
                            "task_id": task_ids[0],
                            "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞",
                            "confidence": 0.9,
                            "reasoning": "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞—á–µ"
                        }
                    ],
                    "requires_confirmation": False,
                    "suggested_response": "–û–±—Å—É–∂–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
                }
            },
            {
                "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É",
                "message": "–æ–Ω–∞ –¥–∞–ª–∞—Å—å –º–Ω–µ —Ç—è–∂–µ–ª–æ",
                "expected_task": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π",  
                "mock_analysis": {
                    "action": "discuss_progress",
                    "selected_tasks": [
                        {
                            "task_id": task_ids[2],
                            "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π",
                            "confidence": 0.85,
                            "reasoning": "–ò–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
                        }
                    ],
                    "requires_confirmation": False,
                    "suggested_response": "–û–±—Å—É–∂–¥–∞–µ–º —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞—á–µ–π"
                },
                "conversation_history": [
                    {"role": "user", "content": "–∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π?"},
                    {"role": "assistant", "content": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π"}
                ]
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\nüß™ –¢–ï–°–¢ {i}: {scenario['name']}")
            print("-" * 50)
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario['message']}")
            
            # Mock the task selector
            with patch.object(evening_agent.task_selector, 'analyze_user_intent', new_callable=AsyncMock) as mock_analyze:
                mock_analyze.return_value = scenario['mock_analysis']
                
                # Test task context analysis
                conversation_history = scenario.get('conversation_history', [])
                analysis = await evening_agent.analyze_task_context(
                    user_id, scenario['message'], conversation_history
                )
                
                print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {analysis.get('action')}")
                print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(analysis.get('selected_tasks', []))}")
                
                if analysis.get('selected_tasks'):
                    task = analysis['selected_tasks'][0]
                    print(f"   üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task.get('title')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {task.get('confidence', 0):.2f}")
                    
                    # Test task discussion
                    with patch.object(evening_agent.llm, 'ainvoke', new_callable=AsyncMock) as mock_llm:
                        mock_llm.return_value = "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö."
                        
                        response = await evening_agent.discuss_task_progress(
                            user_id, scenario['message'], analysis['selected_tasks'], conversation_history
                        )
                        
                        print(f"ü§ñ –û—Ç–≤–µ—Ç —Ç—Ä–µ–∫–µ—Ä–∞: {response[:100]}...")
                        
                        if scenario['expected_task'] in response:
                            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∏ –æ–±—Å—É–∂–¥–∞–µ—Ç –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É")
                        else:
                            print("‚ùå –ù–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
                
                # Verify mock was called with correct parameters
                mock_analyze.assert_called_once()
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

async def test_ai_mentor_task_guidance():
    """–¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π AI-–º–µ–Ω—Ç–æ—Ä–∞ –ø–æ –∑–∞–¥–∞—á–∞–º"""
    
    print("\n\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI-–º–µ–Ω—Ç–æ—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        mentor_agent = AIMentorAgent(api_key="mock-key", model="gpt-4")
        mentor_agent.db = db
        
        user_id = 123456
        
        # Create test tasks
        db.ensure_user_exists(user_id)
        
        task_id = db.create_task(
            user_id=user_id,
            title="–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
            description="–û—Å–≤–æ–∏—Ç—å React –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", 
            priority="high"
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é")
        
        # Test scenarios
        test_scenarios = [
            {
                "name": "–ü—Ä–æ—Å—å–±–∞ –æ —Å–æ–≤–µ—Ç–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ",
                "message": "–∫–∞–∫ –ª—É—á—à–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é? —á—É–≤—Å—Ç–≤—É—é —á—Ç–æ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é",
                "mock_analysis": {
                    "action": "provide_guidance",
                    "selected_tasks": [
                        {
                            "task_id": task_id,
                            "title": "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
                            "confidence": 0.95,
                            "reasoning": "–ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ –∑–∞–¥–∞—á–∏"
                        }
                    ],
                    "requires_confirmation": False,
                    "suggested_response": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
                }
            },
            {
                "name": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∫ –∑–∞–¥–∞—á–µ",
                "message": "–Ω–µ –º–æ–≥—É –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å—Å—è",
                "mock_analysis": {
                    "action": "provide_guidance", 
                    "selected_tasks": [
                        {
                            "task_id": task_id,
                            "title": "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
                            "confidence": 0.7,
                            "reasoning": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ –∏–∑—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω —Å –∑–∞–¥–∞—á–µ–π"
                        }
                    ],
                    "requires_confirmation": False,
                    "suggested_response": "–ü–æ–º–æ—â—å —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∫ –æ–±—É—á–µ–Ω–∏—é"
                },
                "conversation_history": [
                    {"role": "user", "content": "–∫–∞–∫ –ª—É—á—à–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é?"},
                    {"role": "assistant", "content": "–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –æ—Å–Ω–æ–≤ React..."}
                ]
            }
        ]
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"\nüß™ –¢–ï–°–¢ {i}: {scenario['name']}")
            print("-" * 50)
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {scenario['message']}")
            
            # Mock the task selector
            with patch.object(mentor_agent.task_selector, 'analyze_user_intent', new_callable=AsyncMock) as mock_analyze:
                mock_analyze.return_value = scenario['mock_analysis']
                
                # Test task mention analysis
                conversation_history = scenario.get('conversation_history', [])
                analysis = await mentor_agent.analyze_task_mention(
                    user_id, scenario['message'], conversation_history
                )
                
                print(f"üîç –ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {analysis.get('action')}")
                print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(analysis.get('selected_tasks', []))}")
                
                if analysis.get('selected_tasks'):
                    task = analysis['selected_tasks'][0]
                    print(f"   üéØ –°–≤—è–∑–∞–Ω–æ —Å –∑–∞–¥–∞—á–µ–π: {task.get('title')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {task.get('confidence', 0):.2f}")
                    
                    # Test guidance provision
                    with patch.object(mentor_agent.llm, 'ainvoke', new_callable=AsyncMock) as mock_llm:
                        mock_llm.return_value = "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ä–∞–∑–±–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø–æ 25 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å. –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö tutorials, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å."
                        
                        response = await mentor_agent.provide_task_guidance(
                            user_id, scenario['message'], analysis['selected_tasks'], conversation_history
                        )
                        
                        print(f"ü§ñ –°–æ–≤–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞: {response[:100]}...")
                        
                        if "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é" in response:
                            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤—è–∑–∞–ª –≤–æ–ø—Ä–æ—Å —Å –∑–∞–¥–∞—á–µ–π –∏ –¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç")
                        else:
                            print("‚ùå –ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ–π")
                
                # Verify mock was called
                mock_analyze.assert_called_once()
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

async def test_cross_agent_scenarios():
    """–¢–µ—Å—Ç –∫—Ä–æ—Å—Å-–∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    print("\n\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–æ—Å—Å-–∞–≥–µ–Ω—Ç–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    print("=" * 60)
    
    scenarios = [
        {
            "name": "–í–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä ‚Üí AI-–º–µ–Ω—Ç–æ—Ä",
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Å—É–∂–¥–∞–µ—Ç —Ç—Ä—É–¥–Ω—É—é –∑–∞–¥–∞—á—É –≤ –≤–µ—á–µ—Ä–Ω–µ–º —Ç—Ä–µ–∫–µ—Ä–µ, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏—Ç —Å–æ–≤–µ—Ç–∞ —É –º–µ–Ω—Ç–æ—Ä–∞",
            "flow": [
                "üåô Evening: '—ç—Ç–∞ –∑–∞–¥–∞—á–∞ –¥–∞–ª–∞—Å—å –º–Ω–µ —Ç—è–∂–µ–ª–æ —Å–µ–≥–æ–¥–Ω—è'",
                "ü§ñ Evening response with task context",
                "üß† Mentor: '–∫–∞–∫ –º–Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏?'",
                "ü§ñ Mentor guidance based on same task context"
            ]
        },
        {
            "name": "AI-–º–µ–Ω—Ç–æ—Ä ‚Üí Task Management ‚Üí Evening Tracker",
            "description": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–µ–Ω—Ç–æ—Ä–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –≤–µ—á–µ—Ä–æ–º",
            "flow": [
                "üß† Mentor: '–∫–∞–∫ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã?'",
                "ü§ñ Mentor suggests breaking into tasks", 
                "üìã User creates tasks based on advice",
                "üåô Evening: discusses progress on mentor-suggested tasks"
            ]
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìñ –°–¶–ï–ù–ê–†–ò–ô {i}: {scenario['name']}")
        print(f"üí° {scenario['description']}")
        print("\n–ü–æ—Ç–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:")
        for step in scenario['flow']:
            print(f"   {step}")
        
        print("‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä—è TaskSelectorAgent –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç:")
        print("   ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å task_id")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        print("   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º") 
        print("   ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")

if __name__ == "__main__":
    asyncio.run(test_evening_tracker_task_context())
    asyncio.run(test_ai_mentor_task_guidance())
    asyncio.run(test_cross_agent_scenarios())