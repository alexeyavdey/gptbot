"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å AI-–∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

from ai_agents import TaskManagerAgent, OrchestratorAgent, get_database

async def debug_task_manager():
    """–û—Ç–ª–∞–¥–∫–∞ TaskManagerAgent"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ TaskManagerAgent...")
    
    try:
        api_key = "test_key"
        agent = TaskManagerAgent(api_key)
        user_id = 12345
        
        print(f"Tools: {len(agent.tools)}")
        for tool in agent.tools:
            print(f"  - {tool.name}: {tool.description}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ tools
        print("\nüß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ create_task:")
        import json
        params = json.dumps({
            "user_id": user_id,
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "priority": "high"
        })
        
        result = agent._create_task(params)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        print("\nüß™ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ get_tasks:")
        params = json.dumps({"user_id": user_id})
        result = agent._get_tasks(params)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug_task_manager: {e}")
        import traceback
        traceback.print_exc()
        return False

async def debug_orchestrator():
    """–û—Ç–ª–∞–¥–∫–∞ OrchestratorAgent"""
    print("\nüîç –û—Ç–ª–∞–¥–∫–∞ OrchestratorAgent...")
    
    try:
        api_key = "test_key"
        orchestrator = OrchestratorAgent(api_key)
        user_id = 12345
        
        print("–ê–≥–µ–Ω—Ç—ã –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ:")
        print(f"  - TaskManager: {type(orchestrator.task_manager)}")
        print(f"  - EveningTracker: {type(orchestrator.evening_tracker)}")
        
        # –¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
        print("\nüß™ –¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞ (—Å–∏–º—É–ª—è—Ü–∏—è):")
        
        test_messages = [
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ",
            "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á",
            "–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä"
        ]
        
        for message in test_messages:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'")
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–æ—É—Ç–∏–Ω–≥–∞
            if any(word in message.lower() for word in ['—Å–æ–∑–¥–∞–π', '–∑–∞–¥–∞—á', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']):
                route = "TASK_MANAGER"
            elif any(word in message.lower() for word in ['–≤–µ—á–µ—Ä–Ω–∏–π', '—Ç—Ä–µ–∫–µ—Ä']):
                route = "EVENING_TRACKER"
            else:
                route = "GENERAL"
            print(f"  ‚Üí –†–æ—É—Ç–∏–Ω–≥: {route}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug_orchestrator: {e}")
        import traceback
        traceback.print_exc()
        return False

def debug_database():
    """–û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = get_database()
        user_id = 99999
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        db.ensure_user_exists(user_id)
        
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")
        task_ids = []
        for i, (title, priority) in enumerate([
            ("–ó–∞–¥–∞—á–∞ 1", "high"),
            ("–ó–∞–¥–∞—á–∞ 2", "medium"),
            ("–ó–∞–¥–∞—á–∞ 3", "low")
        ]):
            task_id = db.create_task(user_id, title, f"–û–ø–∏—Å–∞–Ω–∏–µ {i+1}", priority)
            task_ids.append(task_id)
            print(f"   –°–æ–∑–¥–∞–Ω–∞: {title} - {task_id[:8]}...")
        
        print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        tasks = db.get_tasks(user_id)
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        print("4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
        success = db.update_task_status(task_ids[0], user_id, "completed")
        print(f"   –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {success}")
        
        print("5. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞...")
        analytics = db.get_task_analytics(user_id)
        print(f"   –í—Å–µ–≥–æ: {analytics['total_tasks']}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics['completed_tasks']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {analytics['completion_rate']}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug_database: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ –û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã AI-–∞–≥–µ–Ω—Ç–æ–≤\n")
    
    results = []
    
    # –û—Ç–ª–∞–¥–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    results.append(debug_database())
    results.append(await debug_task_manager())
    results.append(await debug_orchestrator())
    
    # –ò—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏: {passed}/{total}")
    
    if passed == total:
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

if __name__ == "__main__":
    asyncio.run(main())