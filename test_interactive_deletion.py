#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
"""

import asyncio
import os
import sys
import tempfile
import json

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskManagementAgent
from task_database import TaskDatabase

async def test_interactive_deletion_algorithm():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    # Create temporary database for testing
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize database 
        db = TaskDatabase(temp_db)
        
        # Initialize task management agent directly
        api_key = os.getenv('API_KEY') or 'test-key'
        task_agent = TaskManagementAgent(api_key=api_key, model="gpt-4")
        task_agent.db = db  # Set the database
        
        user_id = 123456  # Test user ID
        
        print("1. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        
        # Create multiple test tasks
        db.ensure_user_exists(user_id)
        
        tasks_data = [
            {"title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞", "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", "priority": "high"},
            {"title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –Ω–∞ Q2", "description": "–ü–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞", "priority": "medium"},
            {"title": "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "description": "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω", "priority": "low"},
            {"title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞", "description": "–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞", "priority": "high"}
        ]
        
        created_tasks = []
        for task_data in tasks_data:
            task_id = db.create_task(
                user_id=user_id,
                title=task_data["title"],
                description=task_data["description"], 
                priority=task_data["priority"]
            )
            created_tasks.append(task_id)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {task_data['title']}")
        
        # Verify tasks were created
        tasks = db.get_tasks(user_id)
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(tasks)}")
        
        print("\n" + "="*60)
        print("2. –≠–¢–ê–ü 1 - –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É")
        print("="*60)
        
        # Simulate user asking to delete task with search text
        delete_params = json.dumps({
            "user_id": user_id,
            "search_text": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"  # Should find multiple tasks
        })
        
        step1_result = task_agent._delete_task(delete_params)
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é'")
        print(f"ü§ñ –ë–æ—Ç:\n{step1_result}")
        
        print("\n" + "="*60)
        print("3. –≠–¢–ê–ü 2 - –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫")
        print("="*60)
        
        # User narrows down the search
        delete_params2 = json.dumps({
            "user_id": user_id,
            "search_text": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–∞–Ω–∫–∞"  # Should find one specific task
        })
        
        step2_result = task_agent._delete_task(delete_params2)
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–∞–Ω–∫–∞'")
        print(f"ü§ñ –ë–æ—Ç:\n{step2_result}")
        
        # Extract task ID from the response for confirmation
        import re
        uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
        task_ids = re.findall(uuid_pattern, step2_result.lower())
        
        if task_ids:
            task_id_to_delete = task_ids[0]
            print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {task_id_to_delete}")
            
            print("\n" + "="*60)
            print("4. –≠–¢–ê–ü 3 - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            print("="*60)
            
            # User confirms deletion
            confirm_params = json.dumps({
                "user_id": user_id,
                "task_id": task_id_to_delete
            })
            
            step3_result = task_agent._delete_task(confirm_params)
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '–¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ'")
            print(f"ü§ñ –ë–æ—Ç:\n{step3_result}")
            
            # Check final state
            final_tasks = db.get_tasks(user_id)
            print(f"\nüìä –ó–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(final_tasks)}")
            
            if len(final_tasks) == len(tasks) - 1:
                print("‚úÖ –£–°–ü–ï–•: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                
                print("\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏:")
                for task in final_tasks:
                    print(f"   ‚Ä¢ {task['title']}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå Error during test: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        # Cleanup
        if os.path.exists(temp_db):
            os.remove(temp_db)

async def test_single_task_deletion():
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        db = TaskDatabase(temp_db)
        api_key = os.getenv('API_KEY') or 'test-key'
        task_agent = TaskManagementAgent(api_key=api_key, model="gpt-4")
        task_agent.db = db
        
        user_id = 123456
        
        # Create one unique task
        db.ensure_user_exists(user_id)
        task_id = db.create_task(
            user_id=user_id,
            title="–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ –º–æ–ª–æ–∫–æ",
            description="–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω", 
            priority="low"
        )
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞")
        
        # Search for this unique task
        delete_params = json.dumps({
            "user_id": user_id,
            "search_text": "–º–æ–ª–æ–∫–æ"
        })
        
        result = task_agent._delete_task(delete_params)
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ –º–æ–ª–æ–∫–æ'")
        print(f"ü§ñ –ë–æ—Ç:\n{result}")
        
        # Check if it shows confirmation request (not immediate deletion)
        if "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in result.lower() or "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ" in result.lower():
            print("‚úÖ –£–°–ü–ï–•: –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_interactive_deletion_algorithm())
    asyncio.run(test_single_task_deletion())