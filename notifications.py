import asyncio
import schedule
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
import pytz
from .logger import create_logger
from .tracker import (
    get_user_data, get_tasks_by_status, TaskStatus, TaskPriority,
    PRIORITY_DESCRIPTIONS, STATUS_DESCRIPTIONS, format_task_text
)

logger = create_logger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–¥–∞—á"""
    
    def __init__(self, bot_instance=None):
        self.bot = bot_instance
        self.running = False
        self.scheduler_thread = None
        self.notification_handlers: Dict[str, Callable] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.register_handler("daily_digest", self._send_daily_digest)
        self.register_handler("deadline_reminder", self._send_deadline_reminder)
        self.register_handler("new_task_notification", self._send_new_task_notification)
    
    def register_handler(self, notification_type: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_handlers[notification_type] = handler
        logger.info(f"Registered notification handler: {notification_type}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            logger.warning("Notification scheduler already running")
            return
        
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self._setup_schedule()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("Notification scheduler started")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        
        schedule.clear()
        logger.info("Notification scheduler stopped")
    
    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ 9:00
        schedule.every().day.at("09:00").do(self._schedule_daily_digest)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        schedule.every(2).hours.do(self._schedule_deadline_reminders)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 23:59
        schedule.every().day.at("23:59").do(self._cleanup_old_notifications)
        
        logger.info("Notification schedule configured")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("Notification scheduler thread started")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"Error in notification scheduler: {e}")
                time.sleep(60)
        
        logger.info("Notification scheduler thread stopped")
    
    def _schedule_daily_digest(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        if not self.bot:
            return
        
        asyncio.create_task(self._send_daily_digest_to_all_users())
    
    def _schedule_deadline_reminders(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö"""
        if not self.bot:
            return
        
        asyncio.create_task(self._send_deadline_reminders_to_all_users())
    
    async def _send_daily_digest_to_all_users(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            from .tracker import load_tracker_data
            
            all_data = load_tracker_data()
            
            for user_id_str, user_data_dict in all_data.items():
                try:
                    user_id = int(user_id_str)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notifications = user_data_dict.get('notifications', {})
                    if not notifications.get('enabled', True) or not notifications.get('daily_digest', False):
                        continue
                    
                    user_data = get_user_data(user_id)
                    if not user_data.completed:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª welcome module
                        continue
                    
                    await self._send_daily_digest(user_id, user_data)
                    
                except Exception as e:
                    logger.error(f"Error sending daily digest to user {user_id_str}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in daily digest broadcast: {e}")
    
    async def _send_deadline_reminders_to_all_users(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            from .tracker import load_tracker_data
            
            all_data = load_tracker_data()
            
            for user_id_str, user_data_dict in all_data.items():
                try:
                    user_id = int(user_id_str)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notifications = user_data_dict.get('notifications', {})
                    if not notifications.get('enabled', True) or not notifications.get('deadline_reminders', False):
                        continue
                    
                    user_data = get_user_data(user_id)
                    if not user_data.completed:
                        continue
                    
                    await self._send_deadline_reminder(user_id, user_data)
                    
                except Exception as e:
                    logger.error(f"Error sending deadline reminder to user {user_id_str}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in deadline reminders broadcast: {e}")
    
    async def _send_daily_digest(self, user_id: int, user_data=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            return
        
        try:
            if not user_data:
                user_data = get_user_data(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
            pending_tasks = get_tasks_by_status(user_data, TaskStatus.PENDING)
            in_progress_tasks = get_tasks_by_status(user_data, TaskStatus.IN_PROGRESS)
            completed_today_tasks = self._get_tasks_completed_today(user_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
            urgent_tasks = [task for task in pending_tasks + in_progress_tasks 
                          if task.priority in [TaskPriority.HIGH, TaskPriority.URGENT]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = "üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç**\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
            text += f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(pending_tasks)}\n"
            text += f"‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {len(in_progress_tasks)}\n"
            text += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—á–µ—Ä–∞: {len(completed_today_tasks)}\n\n"
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if urgent_tasks:
                text += f"üö® **–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                for i, task in enumerate(urgent_tasks[:3], 1):
                    text += f"{i}. {format_task_text(task)}\n"
                
                if len(urgent_tasks) > 3:
                    text += f"... –∏ –µ—â–µ {len(urgent_tasks) - 3} –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á\n"
                text += "\n"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if completed_today_tasks:
                text += f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—á–µ—Ä–∞ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ {len(completed_today_tasks)} –∑–∞–¥–∞—á!\n\n"
            
            # –°–æ–≤–µ—Ç –¥–Ω—è
            text += f"üí° **–°–æ–≤–µ—Ç –¥–Ω—è:** "
            if len(urgent_tasks) > 3:
                text += "–£ –≤–∞—Å –º–Ω–æ–≥–æ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏."
            elif not pending_tasks and not in_progress_tasks:
                text += "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
            else:
                text += "–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏ - —ç—Ç–æ –¥–∞—Å—Ç –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(user_id, text, parse_mode="Markdown")
            logger.info(f"Daily digest sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending daily digest to user {user_id}: {e}")
    
    async def _send_deadline_reminder(self, user_id: int, user_data=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö"""
        if not self.bot:
            return
        
        try:
            if not user_data:
                user_data = get_user_data(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
            upcoming_deadlines = self._get_upcoming_deadlines(user_data, hours=24)
            
            if not upcoming_deadlines:
                return
            
            text = "‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö**\n\n"
            text += f"–£ –≤–∞—Å –µ—Å—Ç—å {len(upcoming_deadlines)} –∑–∞–¥–∞—á —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:\n\n"
            
            for i, (task, hours_left) in enumerate(upcoming_deadlines[:5], 1):
                if hours_left < 1:
                    time_text = "–º–µ–Ω–µ–µ —á–∞—Å–∞"
                elif hours_left < 24:
                    time_text = f"—á–µ—Ä–µ–∑ {int(hours_left)} —á."
                else:
                    time_text = f"—á–µ—Ä–µ–∑ {int(hours_left/24)} –¥–Ω."
                
                text += f"{i}. {format_task_text(task)} (‚è∞ {time_text})\n"
            
            if len(upcoming_deadlines) > 5:
                text += f"\n... –∏ –µ—â–µ {len(upcoming_deadlines) - 5} –∑–∞–¥–∞—á"
            
            text += f"\n\nüí™ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: –ª—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ, —á–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç!"
            
            await self.bot.send_message(user_id, text, parse_mode="Markdown")
            logger.info(f"Deadline reminder sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending deadline reminder to user {user_id}: {e}")
    
    async def _send_new_task_notification(self, user_id: int, task_title: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        if not self.bot:
            return
        
        try:
            user_data = get_user_data(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not user_data.notifications.get('enabled', True):
                return
            if not user_data.notifications.get('new_task_notifications', False):
                return
            
            text = f"üìù **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞**\n\n{task_title}\n\n–£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!"
            
            await self.bot.send_message(user_id, text, parse_mode="Markdown")
            logger.info(f"New task notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending new task notification to user {user_id}: {e}")
    
    def _get_tasks_completed_today(self, user_data) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        now = int(time.time())
        yesterday = now - 24 * 60 * 60
        
        completed_today = []
        for task in user_data.tasks:
            if (task.status == TaskStatus.COMPLETED and 
                task.completed_at and 
                task.completed_at >= yesterday):
                completed_today.append(task)
        
        return completed_today
    
    def _get_upcoming_deadlines(self, user_data, hours: int = 24) -> List:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ N —á–∞—Å–æ–≤"""
        now = int(time.time())
        deadline_threshold = now + hours * 60 * 60
        
        upcoming = []
        for task in user_data.tasks:
            if (task.due_date and 
                task.status in [TaskStatus.PENDING, TaskStatus.IN_PROGRESS] and
                task.due_date <= deadline_threshold):
                hours_left = (task.due_date - now) / 3600
                upcoming.append((task, hours_left))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—É—Å—è –¥–µ–¥–ª–∞–π–Ω—É
        upcoming.sort(key=lambda x: x[1])
        return upcoming
    
    def _cleanup_old_notifications(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("Cleaning up old notification data")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    async def notify_new_task(self, user_id: int, task_title: str):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        await self._send_new_task_notification(user_id, task_title)
    
    async def send_manual_digest(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≤—Ä—É—á–Ω—É—é"""
        user_data = get_user_data(user_id)
        await self._send_daily_digest(user_id, user_data)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()

def get_notification_manager() -> NotificationManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager

def init_notifications(bot_instance):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager.bot = bot_instance
    notification_manager.start_scheduler()
    logger.info("Notification system initialized")

def stop_notifications():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager.stop_scheduler()
    logger.info("Notification system stopped")