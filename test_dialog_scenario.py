#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —É–¥–∞–ª–µ–Ω–∏—è
"""

import asyncio
import os
import sys
import tempfile
import json
import re

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import TaskManagementAgent
from task_database import TaskDatabase

async def test_original_dialog_scenario():
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–æ—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    
    print("üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º")
    print("=" * 70)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize
        db = TaskDatabase(temp_db)
        api_key = os.getenv('API_KEY') or 'test-key'
        task_agent = TaskManagementAgent(api_key=api_key, model="gpt-4")
        task_agent.db = db
        
        user_id = 123456
        
        print("üìù –î–ò–ê–õ–û–ì –°–ò–ú–£–õ–Ø–¶–ò–Ø:")
        print("-" * 70)
        
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        print("üë§ Alexey Avdey: –¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É")
        print("ü§ñ SberMarkBot: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏...")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É (–∫–∞–∫ –±—É–¥—Ç–æ –∞–≥–µ–Ω—Ç —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª)
        db.ensure_user_exists(user_id)
        task_id = db.create_task(
            user_id=user_id,
            title="–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞",
            description="–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –í–ª–∞–¥–∞", 
            priority="high"
        )
        
        print("üë§ Alexey Avdey: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞, —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –í–ª–∞–¥–∞, –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–µ–¥–ª–∞–π–Ω 1 –∏—é–ª—è 2025")
        print("ü§ñ SberMarkBot: –ó–∞–¥–∞—á–∞ '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–π—Ç–∞ –ë–∞–Ω–∫–∞ ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –í–ª–∞–¥–∞' —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        
        # –®–∞–≥ 3: –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á
        tasks = db.get_tasks(user_id)
        print(f"üë§ Alexey Avdey: —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á")
        print(f"ü§ñ SberMarkBot: –£ –≤–∞—Å —Å–µ–π—á–∞—Å {len(tasks)} –∑–∞–¥–∞—á–∞:")
        for i, task in enumerate(tasks, 1):
            print(f"   {i}. {task['title']}")
        
        print("\n" + "="*70)
        print("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ - –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò")
        print("="*70)
        
        # –®–∞–≥ 4: –ü–ï–†–í–ê–Ø –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ—Ç–æ—á–Ω–∞—è)
        print("üë§ Alexey Avdey: –¥–∞–≤–∞–π –µ–µ —É–¥–∞–ª–∏–º")
        
        delete_params1 = json.dumps({
            "user_id": user_id,
            "search_text": "–∑–∞–¥–∞—á—É"  # –û—á–µ–Ω—å –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        })
        
        result1 = task_agent._delete_task(delete_params1)
        print(f"ü§ñ SberMarkBot: {result1}")
        
        print("\n" + "-"*70)
        
        # –®–∞–≥ 5: –í–¢–û–†–ê–Ø –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)
        print("üë§ Alexey Avdey: —É–¥–∞–ª–∏–º –∑–∞–¥–∞—á—É –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        
        delete_params2 = json.dumps({
            "user_id": user_id,
            "search_text": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
        })
        
        result2 = task_agent._delete_task(delete_params2)
        print(f"ü§ñ SberMarkBot: {result2}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
        task_ids = re.findall(uuid_pattern, result2.lower())
        
        if task_ids:
            extracted_task_id = task_ids[0]
            
            print("\n" + "-"*70)
            print("‚úÖ –ú–û–ú–ï–ù–¢ –ò–°–¢–ò–ù–´ - –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï")
            print("-"*70)
            
            # –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            print("üë§ Alexey Avdey: –¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
            
            delete_params3 = json.dumps({
                "user_id": user_id,
                "task_id": extracted_task_id
            })
            
            result3 = task_agent._delete_task(delete_params3)
            print(f"ü§ñ SberMarkBot: {result3}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_tasks = db.get_tasks(user_id)
            
            print("\n" + "="*70)
            print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
            print("="*70)
            
            if len(final_tasks) == 0:
                print("‚úÖ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                print("‚úÖ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
                print("‚úÖ –¢–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
                print(f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: {len(final_tasks)}")
                
            print(f"\nüìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
            print("   ‚Ä¢ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é")
            print("   ‚Ä¢ –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤") 
            print("   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            print("   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
            print("   ‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_original_dialog_scenario())