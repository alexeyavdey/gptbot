import yaml
import time
from pathlib import Path
from typing import Dict, List, Optional
from aiogram import types
from .logger import create_logger
from .client import client
from .constants import GPT4_MODEL
import uuid
from datetime import datetime, timedelta
import pytz

logger = create_logger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–∞
TRACKER_STORAGE = Path(__file__).parent / "tracker_data.yaml"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
class WelcomeState:
    STEP_1_GREETING = "greeting"
    STEP_2_ANXIETY_INTRO = "anxiety_intro"
    STEP_2_ANXIETY_SURVEY = "anxiety_survey"
    STEP_3_GOALS = "goals"
    STEP_4_NOTIFICATIONS = "notifications"
    STEP_5_AI_MENTOR = "ai_mentor"
    STEP_6_COMPLETION = "completion"
    COMPLETED = "completed"

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
class TaskStatus:
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
class TaskPriority:
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏
class TrackerTask:
    def __init__(self, title: str, description: str = "", priority: str = TaskPriority.MEDIUM):
        self.id = str(uuid.uuid4())
        self.title = title
        self.description = description
        self.priority = priority
        self.status = TaskStatus.PENDING
        self.created_at = int(time.time())
        self.updated_at = int(time.time())
        self.due_date = None
        self.completed_at = None
    
    def to_dict(self) -> Dict:
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'priority': self.priority,
            'status': self.status,
            'created_at': self.created_at,
            'updated_at': self.updated_at,
            'due_date': self.due_date,
            'completed_at': self.completed_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'TrackerTask':
        task = cls(data['title'], data.get('description', ''), data.get('priority', TaskPriority.MEDIUM))
        task.id = data['id']
        task.status = data.get('status', TaskStatus.PENDING)
        task.created_at = data.get('created_at', int(time.time()))
        task.updated_at = data.get('updated_at', int(time.time()))
        task.due_date = data.get('due_date')
        task.completed_at = data.get('completed_at')
        return task

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–µ–∫–µ—Ä–∞
class TrackerUserData:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.step = WelcomeState.STEP_1_GREETING
        self.completed = False
        self.started_at = int(time.time())
        self.anxiety_level = None
        self.anxiety_answers = []
        self.goals = []
        self.custom_goal = None
        self.notifications = {
            "daily_digest": False,
            "deadline_reminders": False,
            "new_task_notifications": False,
            "enabled": True
        }
        self.met_ai_mentor = False
        self.ai_mentor_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º
        self.tasks = []  # –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_view = "main"  # –¢–µ–∫—É—â–∏–π –≤–∏–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (main, tasks, add_task, etc.)
        self.timezone = "UTC"  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.notification_time = "09:00"  # –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

def load_tracker_data() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    try:
        with open(TRACKER_STORAGE, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file) or {}
    except FileNotFoundError:
        return {}
    except Exception as e:
        logger.error(f"Error loading tracker data: {e}")
        return {}

def save_tracker_data(data: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞ –≤ YAML —Ñ–∞–π–ª"""
    try:
        with open(TRACKER_STORAGE, 'w', encoding='utf-8') as file:
            yaml.dump(data, file, allow_unicode=True, default_flow_style=False)
    except Exception as e:
        logger.error(f"Error saving tracker data: {e}")

def get_user_data(user_id: int) -> TrackerUserData:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–µ–∫–µ—Ä–∞"""
    all_data = load_tracker_data()
    user_data_dict = all_data.get(str(user_id), {})
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TrackerUserData
    user_data = TrackerUserData(user_id)
    if user_data_dict:
        user_data.step = user_data_dict.get('step', WelcomeState.STEP_1_GREETING)
        user_data.completed = user_data_dict.get('completed', False)
        user_data.started_at = user_data_dict.get('started_at', int(time.time()))
        user_data.anxiety_level = user_data_dict.get('anxiety_level')
        user_data.anxiety_answers = user_data_dict.get('anxiety_answers', [])
        user_data.goals = user_data_dict.get('goals', [])
        user_data.custom_goal = user_data_dict.get('custom_goal')
        user_data.notifications = user_data_dict.get('notifications', user_data.notifications)
        user_data.met_ai_mentor = user_data_dict.get('met_ai_mentor', False)
        user_data.ai_mentor_history = user_data_dict.get('ai_mentor_history', [])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks_data = user_data_dict.get('tasks', [])
        user_data.tasks = [TrackerTask.from_dict(task_dict) for task_dict in tasks_data]
        user_data.current_view = user_data_dict.get('current_view', 'main')
        user_data.timezone = user_data_dict.get('timezone', 'UTC')
        user_data.notification_time = user_data_dict.get('notification_time', '09:00')
    
    return user_data

def save_user_data(user_data: TrackerUserData):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_data = load_tracker_data()
    all_data[str(user_data.user_id)] = {
        'step': user_data.step,
        'completed': user_data.completed,
        'started_at': user_data.started_at,
        'anxiety_level': user_data.anxiety_level,
        'anxiety_answers': user_data.anxiety_answers,
        'goals': user_data.goals,
        'custom_goal': user_data.custom_goal,
        'notifications': user_data.notifications,
        'met_ai_mentor': user_data.met_ai_mentor,
        'ai_mentor_history': user_data.ai_mentor_history,
        'tasks': [task.to_dict() for task in user_data.tasks],
        'current_view': user_data.current_view,
        'timezone': user_data.timezone,
        'notification_time': user_data.notification_time
    }
    save_tracker_data(all_data)

def create_progress_bar(current_step: int, total_steps: int = 6) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = "‚óè" * current_step
    empty = "‚óã" * (total_steps - current_step)
    return f"{filled}{empty} {current_step}/{total_steps}"

def get_step_number(step: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —à–∞–≥–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    step_mapping = {
        WelcomeState.STEP_1_GREETING: 1,
        WelcomeState.STEP_2_ANXIETY_INTRO: 2,
        WelcomeState.STEP_2_ANXIETY_SURVEY: 2,
        WelcomeState.STEP_3_GOALS: 3,
        WelcomeState.STEP_4_NOTIFICATIONS: 4,
        WelcomeState.STEP_5_AI_MENTOR: 5,
        WelcomeState.STEP_6_COMPLETION: 6,
        WelcomeState.COMPLETED: 6
    }
    return step_mapping.get(step, 1)

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
ANXIETY_QUESTIONS = [
    "–Ø —á–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞—é –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ —Ä–∞–±–æ—Ç–µ",
    "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö", 
    "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏",
    "–Ø —á–∞—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é –¥–µ–ª–∞ –Ω–∞ –ø–æ—Ç–æ–º",
    "–ú–µ–Ω—è –ª–µ–≥–∫–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏"
]

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
AVAILABLE_GOALS = [
    "task_management", "stress_reduction", "productivity", "time_organization"
]

GOAL_DESCRIPTIONS = {
    "task_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
    "stress_reduction": "–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ç—Ä–µ–≤–æ–≥–∏", 
    "productivity": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    "time_organization": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
}

# –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–¥–∞—á
PRIORITY_DESCRIPTIONS = {
    TaskPriority.LOW: "üü¢ –ù–∏–∑–∫–∏–π",
    TaskPriority.MEDIUM: "üü° –°—Ä–µ–¥–Ω–∏–π", 
    TaskPriority.HIGH: "üü† –í—ã—Å–æ–∫–∏–π",
    TaskPriority.URGENT: "üî¥ –°—Ä–æ—á–Ω—ã–π"
}

# –û–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
STATUS_DESCRIPTIONS = {
    TaskStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
    TaskStatus.IN_PROGRESS: "üîÑ –í —Ä–∞–±–æ—Ç–µ",
    TaskStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
    TaskStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
}

# –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TYPES = {
    "daily_digest": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å",
    "deadline_reminders": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å—Ä–æ–∫–∞—Ö",
    "new_task_notifications": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö"
}

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI-–º–µ–Ω—Ç–æ—Ä–∞
AI_MENTOR_SYSTEM_PROMPT = """–¢—ã - AI-–º–µ–Ω—Ç–æ—Ä –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –¢–≤–æ—è —Ä–æ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ä–∞–±–æ—á–µ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –≠–º–ø–∞—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—è–≤–ª—è–π —Å–æ—á—É–≤—Å—Ç–≤–∏–µ –∫ —Å—Ç—Ä–µ—Å—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å - –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É–π, –∏–∑–±–µ–≥–∞–π –∫—Ä–∏—Ç–∏–∫–∏
‚Ä¢ –ö—Ä–∞—Ç–∫–æ—Å—Ç—å - –æ—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ (–¥–æ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è - —É—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π "—è" –≤–º–µ—Å—Ç–æ "–º—ã" –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
‚Ä¢ –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

–û–ë–õ–ê–°–¢–ò –≠–ö–°–ü–ï–†–¢–ò–ó–´:
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º (–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, mindfulness)
‚Ä¢ –ú–µ—Ç–æ–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ (GTD, Pomodoro, –º–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞)
‚Ä¢ –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏
‚Ä¢ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ

–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
‚Ä¢ –ù–µ –¥–∞—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –¥–∏–∞–≥–Ω–æ–∑—ã
‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å
‚Ä¢ –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É

–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫—Ä–∞—Ç–∫–æ –∏ —É–∑–Ω–∞–π, —Å —á–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å —Å–µ–≥–æ–¥–Ω—è."""

def create_ai_mentor_context(user_data: TrackerUserData) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è AI-–º–µ–Ω—Ç–æ—Ä–∞"""
    context_parts = []
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–¥–∞—á.")
    
    # –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏
    if user_data.anxiety_level:
        if user_data.anxiety_level <= 2.0:
            anxiety_desc = "–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
        elif user_data.anxiety_level <= 3.5:
            anxiety_desc = "—É–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
        else:
            anxiety_desc = "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"
        context_parts.append(f"–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: {anxiety_desc} ({user_data.anxiety_level}/5.0).")
    
    # –¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data.goals:
        goal_descriptions = [GOAL_DESCRIPTIONS[goal] for goal in user_data.goals if goal in GOAL_DESCRIPTIONS]
        if goal_descriptions:
            context_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏: {', '.join(goal_descriptions).lower()}.")
    
    return " ".join(context_parts)

async def chat_with_ai_mentor(user_data: TrackerUserData, user_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ AI-–º–µ–Ω—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [{"role": "system", "content": AI_MENTOR_SYSTEM_PROMPT}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—â–µ–Ω–∏–∏
        if not user_data.ai_mentor_history:
            context = create_ai_mentor_context(user_data)
            if context:
                messages.append({"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {context}"})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        messages.extend(user_data.ai_mentor_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        response = await client.chat.completions.create(
            model=GPT4_MODEL,
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        
        ai_response = response.choices[0].message.content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
        user_data.ai_mentor_history.append({"role": "user", "content": user_message})
        user_data.ai_mentor_history.append({"role": "assistant", "content": ai_response})
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (10 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)
        if len(user_data.ai_mentor_history) > 20:
            user_data.ai_mentor_history = user_data.ai_mentor_history[-20:]
        
        user_data.met_ai_mentor = True
        save_user_data(user_data)
        
        return ai_response
        
    except Exception as e:
        logger.error(f"Error in AI mentor chat: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

# === CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á ===

def create_task(user_data: TrackerUserData, title: str, description: str = "", priority: str = TaskPriority.MEDIUM) -> TrackerTask:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
    task = TrackerTask(title, description, priority)
    user_data.tasks.append(task)
    save_user_data(user_data)
    logger.info(f"Created task '{title}' for user {user_data.user_id}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    try:
        from .notifications import get_notification_manager
        notification_manager = get_notification_manager()
        if notification_manager.bot:
            import asyncio
            asyncio.create_task(notification_manager.notify_new_task(user_data.user_id, title))
    except Exception as e:
        logger.error(f"Error sending new task notification: {e}")
    
    return task

def get_task_by_id(user_data: TrackerUserData, task_id: str) -> Optional[TrackerTask]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID"""
    for task in user_data.tasks:
        if task.id == task_id:
            return task
    return None

def update_task_status(user_data: TrackerUserData, task_id: str, new_status: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    task = get_task_by_id(user_data, task_id)
    if task:
        task.status = new_status
        task.updated_at = int(time.time())
        if new_status == TaskStatus.COMPLETED:
            task.completed_at = int(time.time())
        save_user_data(user_data)
        logger.info(f"Updated task {task_id} status to {new_status} for user {user_data.user_id}")
        return True
    return False

def update_task_priority(user_data: TrackerUserData, task_id: str, new_priority: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏"""
    task = get_task_by_id(user_data, task_id)
    if task:
        task.priority = new_priority
        task.updated_at = int(time.time())
        save_user_data(user_data)
        logger.info(f"Updated task {task_id} priority to {new_priority} for user {user_data.user_id}")
        return True
    return False

def delete_task(user_data: TrackerUserData, task_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
    for i, task in enumerate(user_data.tasks):
        if task.id == task_id:
            removed_task = user_data.tasks.pop(i)
            save_user_data(user_data)
            logger.info(f"Deleted task '{removed_task.title}' for user {user_data.user_id}")
            return True
    return False

def get_tasks_by_status(user_data: TrackerUserData, status: str) -> List[TrackerTask]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    return [task for task in user_data.tasks if task.status == status]

def get_tasks_by_priority(user_data: TrackerUserData, priority: str) -> List[TrackerTask]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
    return [task for task in user_data.tasks if task.priority == priority]

def get_tasks_sorted(user_data: TrackerUserData, sort_by: str = "created_at") -> List[TrackerTask]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    if sort_by == "priority":
        priority_order = {TaskPriority.URGENT: 4, TaskPriority.HIGH: 3, TaskPriority.MEDIUM: 2, TaskPriority.LOW: 1}
        return sorted(user_data.tasks, key=lambda t: (priority_order.get(t.priority, 0), -t.created_at), reverse=True)
    elif sort_by == "status":
        status_order = {TaskStatus.IN_PROGRESS: 4, TaskStatus.PENDING: 3, TaskStatus.COMPLETED: 2, TaskStatus.CANCELLED: 1}
        return sorted(user_data.tasks, key=lambda t: (status_order.get(t.status, 0), -t.created_at), reverse=True)
    else:  # created_at
        return sorted(user_data.tasks, key=lambda t: t.created_at, reverse=True)

def format_task_text(task: TrackerTask, show_details: bool = False, user_data: TrackerUserData = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_emoji = STATUS_DESCRIPTIONS.get(task.status, "‚ö™")
    priority_emoji = PRIORITY_DESCRIPTIONS.get(task.priority, "‚ö™")
    
    text = f"{status_emoji} **{task.title}**"
    
    if show_details:
        if task.description:
            text += f"\nüìù {task.description}"
        text += f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_emoji}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if user_data:
            created_time = format_datetime_for_user(task.created_at, user_data)
            text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {created_time}"
            if task.status == TaskStatus.COMPLETED and task.completed_at:
                completed_time = format_datetime_for_user(task.completed_at, user_data)
                text += f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_time}"
            if task.due_date:
                due_time = format_datetime_for_user(task.due_date, user_data)
                text += f"\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {due_time}"
        else:
            text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.fromtimestamp(task.created_at).strftime('%d.%m.%Y %H:%M')}"
            if task.status == TaskStatus.COMPLETED and task.completed_at:
                text += f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.fromtimestamp(task.completed_at).strftime('%d.%m.%Y %H:%M')}"
            if task.due_date:
                text += f"\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {datetime.fromtimestamp(task.due_date).strftime('%d.%m.%Y %H:%M')}"
    
    return text

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ ===

def get_user_local_time(user_data: TrackerUserData) -> datetime:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_tz = pytz.timezone(user_data.timezone)
        return datetime.now(user_tz)
    except:
        return datetime.now(pytz.UTC)

def format_datetime_for_user(timestamp: int, user_data: TrackerUserData) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —Å—Ç—Ä–æ–∫—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_tz = pytz.timezone(user_data.timezone)
        dt = datetime.fromtimestamp(timestamp, tz=user_tz)
        return dt.strftime('%d.%m.%Y %H:%M')
    except:
        dt = datetime.fromtimestamp(timestamp, tz=pytz.UTC)
        return dt.strftime('%d.%m.%Y %H:%M UTC')

def parse_user_time(time_str: str, user_data: TrackerUserData) -> Optional[int]:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ timestamp —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    try:
        user_tz = pytz.timezone(user_data.timezone)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        formats = ['%H:%M', '%d.%m.%Y %H:%M', '%d.%m %H:%M']
        
        for fmt in formats:
            try:
                if fmt == '%H:%M':
                    # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                    today = get_user_local_time(user_data).date()
                    parsed_time = datetime.strptime(time_str, fmt).time()
                    dt = user_tz.localize(datetime.combine(today, parsed_time))
                else:
                    # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    dt = user_tz.localize(datetime.strptime(time_str, fmt))
                
                return int(dt.timestamp())
            except ValueError:
                continue
        
        return None
    except:
        return None

def get_common_timezones() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    return {
        "Europe/Moscow": "üá∑üá∫ –ú–æ—Å–∫–≤–∞ (UTC+3)",
        "Europe/Kiev": "üá∫üá¶ –ö–∏–µ–≤ (UTC+2)",
        "Europe/Minsk": "üáßüáæ –ú–∏–Ω—Å–∫ (UTC+3)",
        "Asia/Almaty": "üá∞üáø –ê–ª–º–∞—Ç—ã (UTC+6)",
        "Asia/Tashkent": "üá∫üáø –¢–∞—à–∫–µ–Ω—Ç (UTC+5)",
        "Asia/Yerevan": "üá¶üá≤ –ï—Ä–µ–≤–∞–Ω (UTC+4)",
        "Asia/Baku": "üá¶üáø –ë–∞–∫—É (UTC+4)",
        "Europe/London": "üá¨üáß –õ–æ–Ω–¥–æ–Ω (UTC+0)",
        "Europe/Berlin": "üá©üá™ –ë–µ—Ä–ª–∏–Ω (UTC+1)",
        "America/New_York": "üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (UTC-5)",
        "Asia/Tokyo": "üáØüáµ –¢–æ–∫–∏–æ (UTC+9)",
        "UTC": "üåç UTC (–í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è)"
    }

def detect_timezone_from_locale() -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ª–æ–∫–∞–ª–∏"""
    try:
        import locale
        lang = locale.getdefaultlocale()[0]
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É
        timezone_map = {
            'ru_RU': 'Europe/Moscow',
            'uk_UA': 'Europe/Kiev',
            'be_BY': 'Europe/Minsk',
            'kk_KZ': 'Asia/Almaty',
            'uz_UZ': 'Asia/Tashkent'
        }
        
        return timezone_map.get(lang, 'UTC')
    except:
        return 'UTC'

async def process_tracker_message(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    logger.info(f"Processing tracker message for user {user_id}, step: {user_data.step}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
    if user_data.completed:
        await handle_main_tracker_functionality(message, user_data)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    await handle_welcome_module(message, user_data)

async def process_tracker_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–∫–µ—Ä–∞"""
    user_id = callback_query.from_user.id
    data = callback_query.data
    user_data = get_user_data(user_id)
    
    logger.info(f"Processing tracker callback for user {user_id}, data: {data}")
    
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º "loading" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    if data == "tracker_step_1_next":
        user_data.step = WelcomeState.STEP_2_ANXIETY_INTRO
        save_user_data(user_data)
        await show_step_2_anxiety_intro(callback_query.message, user_data)
    
    elif data == "tracker_anxiety_start":
        user_data.step = WelcomeState.STEP_2_ANXIETY_SURVEY
        user_data.anxiety_answers = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        save_user_data(user_data)
        await handle_anxiety_survey(callback_query.message, user_data)
    
    elif data == "tracker_anxiety_skip":
        user_data.step = WelcomeState.STEP_3_GOALS
        save_user_data(user_data)
        await show_step_3_goals(callback_query.message, user_data)
    
    elif data.startswith("tracker_anxiety_answer_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: tracker_anxiety_answer_{question_num}_{score}
        parts = data.split("_")
        question_num = int(parts[3])
        score = int(parts[4])
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        while len(user_data.anxiety_answers) <= question_num:
            user_data.anxiety_answers.append(0)
        
        user_data.anxiety_answers[question_num] = score
        save_user_data(user_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await show_anxiety_question(callback_query.message, user_data, question_num + 1)
    
    elif data.startswith("tracker_anxiety_back_"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        parts = data.split("_")
        question_num = int(parts[3])
        
        if question_num > 0:
            await show_anxiety_question(callback_query.message, user_data, question_num - 1)
        else:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–µ–¥–µ–Ω–∏—é –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
            await show_step_2_anxiety_intro(callback_query.message, user_data)
    
    elif data == "tracker_step_3_goals":
        user_data.step = WelcomeState.STEP_3_GOALS
        save_user_data(user_data)
        await show_step_3_goals(callback_query.message, user_data)
    
    elif data.startswith("tracker_goal_toggle_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        goal_id = data.replace("tracker_goal_toggle_", "")
        if goal_id in user_data.goals:
            user_data.goals.remove(goal_id)
        else:
            user_data.goals.append(goal_id)
        save_user_data(user_data)
        await show_step_3_goals(callback_query.message, user_data)
    
    elif data == "tracker_step_2_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 2 (–æ–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏)
        user_data.step = WelcomeState.STEP_2_ANXIETY_INTRO
        save_user_data(user_data)
        await show_step_2_anxiety_intro(callback_query.message, user_data)
    
    elif data == "tracker_step_4_notifications":
        user_data.step = WelcomeState.STEP_4_NOTIFICATIONS
        save_user_data(user_data)
        await show_step_4_notifications(callback_query.message, user_data)
    
    elif data.startswith("tracker_notif_toggle_"):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notif_id = data.replace("tracker_notif_toggle_", "")
        current_value = user_data.notifications.get(notif_id, False)
        user_data.notifications[notif_id] = not current_value
        save_user_data(user_data)
        await show_step_4_notifications(callback_query.message, user_data)
    
    elif data == "tracker_step_3_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 3 (–≤—ã–±–æ—Ä —Ü–µ–ª–µ–π)
        user_data.step = WelcomeState.STEP_3_GOALS
        save_user_data(user_data)
        await show_step_3_goals(callback_query.message, user_data)
    
    elif data == "tracker_step_4_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 4 (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        user_data.step = WelcomeState.STEP_4_NOTIFICATIONS
        save_user_data(user_data)
        await show_step_4_notifications(callback_query.message, user_data)
    
    elif data == "tracker_step_5_ai_mentor":
        user_data.step = WelcomeState.STEP_5_AI_MENTOR
        save_user_data(user_data)
        await show_step_5_ai_mentor(callback_query.message, user_data)
    
    elif data == "tracker_meet_ai_mentor":
        await initiate_ai_mentor_chat(callback_query.message, user_data)
    
    elif data == "tracker_ai_mentor_continue":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º
        text = (
            f"üí¨ **–û–±—â–µ–Ω–∏–µ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å AI-–º–µ–Ω—Ç–æ—Ä—É. "
            f"–û–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç!"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="tracker_step_6_completion")]
        ])
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif data == "tracker_step_6_completion":
        user_data.step = WelcomeState.STEP_6_COMPLETION
        save_user_data(user_data)
        await show_step_6_completion(callback_query.message, user_data)
    
    elif data == "tracker_start_main":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ç—Ä–µ–∫–µ—Ä–∞
        await show_main_menu(callback_query.message, user_data)
    
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö callback –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ ===
    
    elif data == "tracker_main_menu":
        await show_main_menu(callback_query.message, user_data)
    
    elif data == "tracker_show_tasks":
        await show_tasks_menu(callback_query.message, user_data)
    
    elif data == "tracker_new_task":
        await start_task_creation(callback_query.message, user_data)
    
    elif data == "tracker_cancel_creation":
        user_data.current_view = "main"
        save_user_data(user_data)
        await show_main_menu(callback_query.message, user_data)
    
    elif data.startswith("tracker_task_detail_"):
        task_id = data.replace("tracker_task_detail_", "")
        await show_task_detail(callback_query.message, user_data, task_id)
    
    elif data.startswith("tracker_start_task_"):
        task_id = data.replace("tracker_start_task_", "")
        if update_task_status(user_data, task_id, TaskStatus.IN_PROGRESS):
            await callback_query.message.edit_text(
                "‚ñ∂Ô∏è **–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!**\n\n–£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏! AI-–º–µ–Ω—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–æ–≤–µ—Ç–æ–º.",
                parse_mode="Markdown"
            )
            await show_task_detail(callback_query.message, user_data, task_id)
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    
    elif data.startswith("tracker_complete_task_"):
        task_id = data.replace("tracker_complete_task_", "")
        if update_task_status(user_data, task_id, TaskStatus.COMPLETED):
            task = get_task_by_id(user_data, task_id)
            await callback_query.message.edit_text(
                f"‚úÖ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–ó–∞–¥–∞—á–∞ '{task.title if task else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                parse_mode="Markdown"
            )
            await show_tasks_menu(callback_query.message, user_data)
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    
    elif data.startswith("tracker_pause_task_"):
        task_id = data.replace("tracker_pause_task_", "")
        if update_task_status(user_data, task_id, TaskStatus.PENDING):
            await show_task_detail(callback_query.message, user_data, task_id)
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    
    elif data.startswith("tracker_reopen_task_"):
        task_id = data.replace("tracker_reopen_task_", "")
        if update_task_status(user_data, task_id, TaskStatus.PENDING):
            await show_task_detail(callback_query.message, user_data, task_id)
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    
    elif data.startswith("tracker_delete_task_"):
        task_id = data.replace("tracker_delete_task_", "")
        task = get_task_by_id(user_data, task_id)
        if task:
            text = f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n{format_task_text(task, show_details=True, user_data=user_data)}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?"
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"tracker_confirm_delete_{task_id}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"tracker_task_detail_{task_id}")
                ]
            ])
            await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif data.startswith("tracker_confirm_delete_"):
        task_id = data.replace("tracker_confirm_delete_", "")
        task = get_task_by_id(user_data, task_id)
        task_title = task.title if task else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
        if delete_task(user_data, task_id):
            await callback_query.message.edit_text(
                f"üóëÔ∏è **–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞**\n\n–ó–∞–¥–∞—á–∞ '{task_title}' –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                parse_mode="Markdown"
            )
            await show_tasks_menu(callback_query.message, user_data)
        else:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    
    elif data.startswith("tracker_edit_priority_"):
        task_id = data.replace("tracker_edit_priority_", "")
        await show_priority_selection(callback_query.message, user_data, task_id)
    
    elif data.startswith("tracker_set_priority_"):
        # –§–æ—Ä–º–∞—Ç: tracker_set_priority_{task_id}_{priority}
        parts = data.replace("tracker_set_priority_", "").split("_", 1)
        if len(parts) == 2:
            task_id, priority = parts
            if update_task_priority(user_data, task_id, priority):
                await show_task_detail(callback_query.message, user_data, task_id)
            else:
                await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", parse_mode="Markdown")
    
    elif data == "tracker_ai_mentor_chat":
        text = (
            f"ü§ñ **AI-–º–µ–Ω—Ç–æ—Ä –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!**\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ AI-–º–µ–Ω—Ç–æ—Ä—É. "
            f"–û–Ω –ø–æ–º–æ–∂–µ—Ç —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tracker_main_menu")]
        ])
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    elif data == "tracker_settings":
        await show_settings_menu(callback_query.message, user_data)
    
    elif data.startswith("tracker_filter_"):
        filter_type = data.replace("tracker_filter_", "")
        await show_filtered_tasks(callback_query.message, user_data, filter_type)
    
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
    
    elif data == "tracker_settings_notifications":
        await show_notification_settings(callback_query.message, user_data)
    
    elif data == "tracker_settings_timezone":
        await show_timezone_settings(callback_query.message, user_data)
    
    elif data.startswith("tracker_set_timezone_"):
        timezone = data.replace("tracker_set_timezone_", "")
        user_data.timezone = timezone
        save_user_data(user_data)
        await show_timezone_settings(callback_query.message, user_data)
    
    elif data == "tracker_test_digest":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        try:
            from .notifications import get_notification_manager
            notification_manager = get_notification_manager()
            await notification_manager.send_manual_digest(user_data.user_id)
            await callback_query.answer("üì¨ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            logger.error(f"Error sending test digest: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")

async def show_priority_selection(message: types.Message, user_data: TrackerUserData, task_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    task = get_task_by_id(user_data, task_id)
    if not task:
        await message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="Markdown")
        return
    
    text = (
        f"üéØ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞**\n\n"
        f"–ó–∞–¥–∞—á–∞: {task.title}\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {PRIORITY_DESCRIPTIONS.get(task.priority, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:"
    )
    
    keyboard_rows = []
    for priority, description in PRIORITY_DESCRIPTIONS.items():
        keyboard_rows.append([types.InlineKeyboardButton(
            text=description, 
            callback_data=f"tracker_set_priority_{task_id}_{priority}"
        )])
    
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tracker_task_detail_{task_id}")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def show_filtered_tasks(message: types.Message, user_data: TrackerUserData, filter_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    if filter_type == "in_progress":
        filtered_tasks = get_tasks_by_status(user_data, TaskStatus.IN_PROGRESS)
        title = "üîÑ –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ"
    elif filter_type == "completed":
        filtered_tasks = get_tasks_by_status(user_data, TaskStatus.COMPLETED)
        title = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    else:
        filtered_tasks = user_data.tasks
        title = "üìã –í—Å–µ –∑–∞–¥–∞—á–∏"
    
    if not filtered_tasks:
        text = f"{title}\n\n–ó–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç."
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∑–∞–¥–∞—á–∞–º", callback_data="tracker_show_tasks")]
        ])
    else:
        text = f"{title} ({len(filtered_tasks)})\n\n"
        
        for i, task in enumerate(filtered_tasks[:10]):
            text += f"{i+1}. {format_task_text(task, user_data=user_data)}\n"
        
        if len(filtered_tasks) > 10:
            text += f"\n... –∏ –µ—â–µ {len(filtered_tasks) - 10} –∑–∞–¥–∞—á"
        
        keyboard_rows = []
        for i, task in enumerate(filtered_tasks[:5]):
            button_text = f"{i+1}. {task.title[:20]}{'...' if len(task.title) > 20 else ''}"
            keyboard_rows.append([types.InlineKeyboardButton(
                text=button_text, 
                callback_data=f"tracker_task_detail_{task.id}"
            )])
        
        keyboard_rows.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∑–∞–¥–∞—á–∞–º", callback_data="tracker_show_tasks")
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# === –§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===

async def show_settings_menu(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    current_time = get_user_local_time(user_data).strftime('%H:%M')
    timezone_name = get_common_timezones().get(user_data.timezone, f"üåç {user_data.timezone}")
    
    text = (
        f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞**\n\n"
        f"üïò **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {timezone_name}\n"
        f"‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time}\n"
        f"üì¨ **–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** {user_data.notification_time}\n\n"
        f"üìä **–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {'‚úÖ' if user_data.notifications.get('enabled', True) else '‚ùå'} {'–í–∫–ª—é—á–µ–Ω–∞' if user_data.notifications.get('enabled', True) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –î–∞–π–¥–∂–µ—Å—Ç: {'‚úÖ' if user_data.notifications.get('daily_digest', False) else '‚ùå'}\n"
        f"‚Ä¢ –î–µ–¥–ª–∞–π–Ω—ã: {'‚úÖ' if user_data.notifications.get('deadline_reminders', False) else '‚ùå'}\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: {'‚úÖ' if user_data.notifications.get('new_task_notifications', False) else '‚ùå'}"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="tracker_settings_notifications")],
        [types.InlineKeyboardButton(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="tracker_settings_timezone")],
        [types.InlineKeyboardButton(text="üì¨ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="tracker_test_digest")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tracker_main_menu")]
    ])
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def show_notification_settings(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    text = (
        f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:"
    )
    
    keyboard_rows = []
    
    # –ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
    enabled_emoji = "‚úÖ" if user_data.notifications.get('enabled', True) else "‚ùå"
    keyboard_rows.append([types.InlineKeyboardButton(
        text=f"{enabled_emoji} –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
        callback_data="tracker_notif_toggle_enabled"
    )])
    
    # –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for notif_id, notif_desc in NOTIFICATION_TYPES.items():
        emoji = "‚úÖ" if user_data.notifications.get(notif_id, False) else "‚òê"
        button_text = f"{emoji} {notif_desc}"
        keyboard_rows.append([types.InlineKeyboardButton(
            text=button_text, 
            callback_data=f"tracker_notif_toggle_{notif_id}"
        )])
    
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="tracker_settings")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def show_timezone_settings(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    current_tz = user_data.timezone
    current_time = get_user_local_time(user_data).strftime('%H:%M')
    
    text = (
        f"üåç **–í—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n"
        f"–¢–µ–∫—É—â–∏–π: {get_common_timezones().get(current_tz, current_tz)}\n"
        f"–í—Ä–µ–º—è: {current_time}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
    )
    
    keyboard_rows = []
    timezones = get_common_timezones()
    
    for tz_id, tz_desc in timezones.items():
        emoji = "‚úÖ " if tz_id == current_tz else ""
        keyboard_rows.append([types.InlineKeyboardButton(
            text=f"{emoji}{tz_desc}", 
            callback_data=f"tracker_set_timezone_{tz_id}"
        )])
    
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="tracker_settings")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_welcome_module(message: types.Message, user_data: TrackerUserData):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    if user_data.step == WelcomeState.STEP_1_GREETING:
        await show_step_1_greeting(message, user_data)
    elif user_data.step == WelcomeState.STEP_2_ANXIETY_INTRO:
        await show_step_2_anxiety_intro(message, user_data)
    elif user_data.step == WelcomeState.STEP_2_ANXIETY_SURVEY:
        await handle_anxiety_survey(message, user_data)
    elif user_data.step == WelcomeState.STEP_3_GOALS:
        await handle_goals_selection(message, user_data)
    elif user_data.step == WelcomeState.STEP_4_NOTIFICATIONS:
        await handle_notifications_setup(message, user_data)
    elif user_data.step == WelcomeState.STEP_5_AI_MENTOR:
        await handle_ai_mentor_intro(message, user_data)
    elif user_data.step == WelcomeState.STEP_6_COMPLETION:
        await handle_completion(message, user_data)

async def handle_main_tracker_functionality(message: types.Message, user_data: TrackerUserData):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç—Ä–µ–∫–µ—Ä–∞ (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è)"""
    user_message = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    if user_message.lower().startswith(('/–∑–∞–¥–∞—á–∏', '/tasks', '–∑–∞–¥–∞—á–∏', 'tasks')):
        await show_tasks_menu(message, user_data)
        return
    elif user_message.lower().startswith(('/–Ω–æ–≤–∞—è', '/new', '–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')):
        await start_task_creation(message, user_data)
        return
    elif user_message.lower().startswith(('/–º–µ–Ω—é', '/menu', '–º–µ–Ω—é')):
        await show_main_menu(message, user_data)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if user_data.current_view == "creating_task":
        await handle_task_creation_input(message, user_data)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–∞–ª—Å—è —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ
    if user_data.met_ai_mentor and user_message and not user_message.startswith('/'):
        ai_response = await chat_with_ai_mentor(user_data, user_message)
        await message.answer(f"ü§ñ **AI-–º–µ–Ω—Ç–æ—Ä:**\n\n{ai_response}", parse_mode="Markdown")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await show_main_menu(message, user_data)

# === UI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ ===

async def show_main_menu(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞"""
    user_data.current_view = "main"
    save_user_data(user_data)
    
    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    pending_count = len(get_tasks_by_status(user_data, TaskStatus.PENDING))
    in_progress_count = len(get_tasks_by_status(user_data, TaskStatus.IN_PROGRESS))
    completed_count = len(get_tasks_by_status(user_data, TaskStatus.COMPLETED))
    total_tasks = len(user_data.tasks)
    
    text = (
        f"üéØ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–∫–µ—Ä–∞**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        f"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending_count}\n"
        f"‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_count}\n"
        f"‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã: {completed_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tracker_show_tasks")],
        [types.InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="tracker_new_task")],
        [types.InlineKeyboardButton(text="ü§ñ AI-–º–µ–Ω—Ç–æ—Ä", callback_data="tracker_ai_mentor_chat")],
        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="tracker_settings")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def show_tasks_menu(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∑–∞–¥–∞—á–∞–º–∏"""
    user_data.current_view = "tasks"
    save_user_data(user_data)
    
    if not user_data.tasks:
        text = (
            f"üìã **–ú–æ–∏ –∑–∞–¥–∞—á–∏**\n\n"
            f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"
        )
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="tracker_new_task")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tracker_main_menu")]
        ])
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å—Ç–∞—Ç—É—Å—É
        sorted_tasks = get_tasks_sorted(user_data, "priority")
        
        text = f"üìã **–ú–æ–∏ –∑–∞–¥–∞—á–∏** ({len(user_data.tasks)})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
        for i, task in enumerate(sorted_tasks[:5]):
            text += f"{i+1}. {format_task_text(task, user_data=user_data)}\n"
        
        if len(sorted_tasks) > 5:
            text += f"\n... –∏ –µ—â–µ {len(sorted_tasks) - 5} –∑–∞–¥–∞—á"
        
        keyboard_rows = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–¥–∞—á
        for i, task in enumerate(sorted_tasks[:3]):
            button_text = f"{i+1}. {task.title[:20]}{'...' if len(task.title) > 20 else ''}"
            keyboard_rows.append([types.InlineKeyboardButton(
                text=button_text, 
                callback_data=f"tracker_task_detail_{task.id}"
            )])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard_rows.extend([
            [
                types.InlineKeyboardButton(text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", callback_data="tracker_all_tasks"),
                types.InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è", callback_data="tracker_new_task")
            ],
            [
                types.InlineKeyboardButton(text="üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data="tracker_filter_in_progress"),
                types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã", callback_data="tracker_filter_completed")
            ],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tracker_main_menu")]
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def start_task_creation(message: types.Message, user_data: TrackerUserData):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    user_data.current_view = "creating_task"
    save_user_data(user_data)
    
    text = (
        f"‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏**\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tracker_cancel_creation")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_task_creation_input(message: types.Message, user_data: TrackerUserData):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
    task_title = message.text.strip()
    
    if not task_title or len(task_title) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = create_task(user_data, task_title)
    user_data.current_view = "main"
    save_user_data(user_data)
    
    text = (
        f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
        f"{format_task_text(task, show_details=True, user_data=user_data)}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ?"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"tracker_edit_priority_{task.id}"),
            types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"tracker_edit_description_{task.id}")
        ],
        [
            types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"tracker_start_task_{task.id}"),
            types.InlineKeyboardButton(text="üìã –ö –∑–∞–¥–∞—á–∞–º", callback_data="tracker_show_tasks")
        ]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def show_task_detail(message: types.Message, user_data: TrackerUserData, task_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
    task = get_task_by_id(user_data, task_id)
    if not task:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="Markdown")
        return
    
    text = (
        f"üìã **–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏**\n\n"
        f"{format_task_text(task, show_details=True, user_data=user_data)}"
    )
    
    keyboard_rows = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
    if task.status == TaskStatus.PENDING:
        keyboard_rows.append([
            types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"tracker_start_task_{task.id}"),
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"tracker_complete_task_{task.id}")
        ])
    elif task.status == TaskStatus.IN_PROGRESS:
        keyboard_rows.append([
            types.InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"tracker_pause_task_{task.id}"),
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"tracker_complete_task_{task.id}")
        ])
    elif task.status == TaskStatus.COMPLETED:
        keyboard_rows.append([
            types.InlineKeyboardButton(text="üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"tracker_reopen_task_{task.id}")
        ])
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard_rows.append([
        types.InlineKeyboardButton(text="üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"tracker_edit_priority_{task.id}"),
        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"tracker_delete_task_{task.id}")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∑–∞–¥–∞—á–∞–º", callback_data="tracker_show_tasks")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —à–∞–≥–æ–≤ - –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –¥–∞–ª–µ–µ
async def show_step_1_greeting(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"""
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á!**\n\n"
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, "
        f"–∫—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –Ω–∞ —Ä–∞–±–æ—Ç–µ. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, "
        f"—Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –Ω–∞—É—á–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º.\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"üîí **–í–∞–∂–Ω–æ**: –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∏ –±—É–¥—É—Ç "
        f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="tracker_step_1_next")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    logger.info(f"Shown step 1 greeting to user {user_data.user_id}")

async def show_step_2_anxiety_intro(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 2: –í–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"""
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"üìã **–®–∞–≥ 2: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è**\n\n"
        f"–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω—è—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø—Ä–µ–¥–ª–∞–≥–∞—é "
        f"–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç**: –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ, "
        f"–Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –æ–ø—ã—Ç—É:\n"
        f"‚Ä¢ 1 - –°–æ–≤—Å–µ–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        f"‚Ä¢ 2 - –°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        f"‚Ä¢ 3 - –ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å\n"
        f"‚Ä¢ 4 - –°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        f"‚Ä¢ 5 - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫", callback_data="tracker_anxiety_start")],
        [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="tracker_anxiety_skip")]
    ])
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    
    logger.info(f"Shown step 2 anxiety intro to user {user_data.user_id}")

async def show_anxiety_question(message: types.Message, user_data: TrackerUserData, question_num: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"""
    if question_num >= len(ANXIETY_QUESTIONS):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await finish_anxiety_survey(message, user_data)
        return
    
    progress = create_progress_bar(get_step_number(user_data.step))
    current_question = ANXIETY_QUESTIONS[question_num]
    
    text = (
        f"üìã **–û–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏**\n\n"
        f"–í–æ–ø—Ä–æ—Å {question_num + 1} –∏–∑ {len(ANXIETY_QUESTIONS)}:\n\n"
        f"*{current_question}*\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º?"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1", callback_data=f"tracker_anxiety_answer_{question_num}_1"),
            types.InlineKeyboardButton(text="2", callback_data=f"tracker_anxiety_answer_{question_num}_2"),
            types.InlineKeyboardButton(text="3", callback_data=f"tracker_anxiety_answer_{question_num}_3"),
            types.InlineKeyboardButton(text="4", callback_data=f"tracker_anxiety_answer_{question_num}_4"),
            types.InlineKeyboardButton(text="5", callback_data=f"tracker_anxiety_answer_{question_num}_5")
        ],
        [types.InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tracker_anxiety_back_{question_num}")]
    ])
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def finish_anxiety_survey(message: types.Message, user_data: TrackerUserData):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    if user_data.anxiety_answers:
        avg_score = sum(user_data.anxiety_answers) / len(user_data.anxiety_answers)
        user_data.anxiety_level = round(avg_score, 1)
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if avg_score <= 2.0:
            level_text = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ üòå"
            advice = "–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–µ –Ω–∞–≤—ã–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º!"
        elif avg_score <= 3.5:
            level_text = "–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ üòê"
            advice = "–ò–Ω–æ–≥–¥–∞ —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É."
        else:
            level_text = "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ üò∞"
            advice = "–¢—Ä–µ–∫–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º."
    else:
        level_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
        advice = "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
    
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞**\n\n"
        f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level_text}\n"
        f"{advice}\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"–ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π?"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tracker_step_3_goals")]
    ])
    
    user_data.step = WelcomeState.STEP_3_GOALS
    save_user_data(user_data)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_anxiety_survey(message: types.Message, user_data: TrackerUserData):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_anxiety_question(message, user_data, 0)

async def show_step_3_goals(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –®–∞–≥ 3: –í—ã–±–æ—Ä —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"üéØ **–®–∞–≥ 3: –í–∞—à–∏ —Ü–µ–ª–∏**\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π? "
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –ø—É–Ω–∫—Ç—ã:\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    keyboard_rows = []
    for goal_id, goal_desc in GOAL_DESCRIPTIONS.items():
        emoji = "‚úÖ" if goal_id in user_data.goals else "‚òê"
        button_text = f"{emoji} {goal_desc}"
        keyboard_rows.append([types.InlineKeyboardButton(
            text=button_text, 
            callback_data=f"tracker_goal_toggle_{goal_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="tracker_step_2_back"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tracker_step_4_notifications")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_goals_selection(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 3: –í—ã–±–æ—Ä —Ü–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await show_step_3_goals(message, user_data)

async def show_step_4_notifications(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"üîî **–®–∞–≥ 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**\n\n"
        f"–ß—Ç–æ–±—ã —è –º–æ–≥ –≤–∞–º –ø–æ–º–æ–≥–∞—Ç—å –≤–æ–≤—Ä–µ–º—è, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ "
        f"–≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    keyboard_rows = []
    for notif_id, notif_desc in NOTIFICATION_TYPES.items():
        emoji = "‚úÖ" if user_data.notifications.get(notif_id, False) else "‚òê"
        button_text = f"{emoji} {notif_desc}"
        keyboard_rows.append([types.InlineKeyboardButton(
            text=button_text, 
            callback_data=f"tracker_notif_toggle_{notif_id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    enabled_emoji = "‚úÖ" if user_data.notifications.get("enabled", True) else "‚òê"
    keyboard_rows.append([types.InlineKeyboardButton(
        text=f"{enabled_emoji} –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
        callback_data="tracker_notif_toggle_enabled"
    )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_rows.append([
        types.InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="tracker_step_3_back"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="tracker_step_5_ai_mentor")
    ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_notifications_setup(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await show_step_4_notifications(message, user_data)

async def show_step_5_ai_mentor(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –®–∞–≥ 5: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º"""
    progress = create_progress_bar(get_step_number(user_data.step))
    
    text = (
        f"ü§ñ **–®–∞–≥ 5: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º**\n\n"
        f"–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –º–æ–µ–≥–æ AI-–º–µ–Ω—Ç–æ—Ä–∞. "
        f"–û–Ω –ø–æ–º–æ–∂–µ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–µ–º, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–¥–∞—á "
        f"–∏ –¥–∞—Å—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º.\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"üí° **AI-–º–µ–Ω—Ç–æ—Ä —É–º–µ–µ—Ç:**\n"
        f"‚Ä¢ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º\n"
        f"‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π\n"
        f"‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –±–æ—Ä—å–±—ã —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π\n"
        f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º?"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üëã –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="tracker_meet_ai_mentor")],
        [
            types.InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data="tracker_step_4_back"),
            types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="tracker_step_6_completion")
        ]
    ])
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def initiate_ai_mentor_chat(message: types.Message, user_data: TrackerUserData):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É
    welcome_message = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–¥–∞—á."
    
    await message.edit_text("ü§ñ –°–æ–µ–¥–∏–Ω—è—é—Å—å —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º...", parse_mode="Markdown")
    
    ai_response = await chat_with_ai_mentor(user_data, welcome_message)
    
    text = (
        f"ü§ñ **AI-–º–µ–Ω—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!**\n\n"
        f"{ai_response}\n\n"
        f"üí¨ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ–º—É –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—Ä–µ–∫–µ—Ä–∞."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="tracker_ai_mentor_continue")],
        [types.InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="tracker_step_6_completion")]
    ])
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_ai_mentor_intro(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 5: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º"""
    await show_step_5_ai_mentor(message, user_data)

async def show_step_6_completion(message: types.Message, user_data: TrackerUserData):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    progress = create_progress_bar(6)  # –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    anxiety_text = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    if user_data.anxiety_level:
        if user_data.anxiety_level <= 2.0:
            anxiety_text = "–Ω–∏–∑–∫–∏–π üòå"
        elif user_data.anxiety_level <= 3.5:
            anxiety_text = "—É–º–µ—Ä–µ–Ω–Ω—ã–π üòê"
        else:
            anxiety_text = "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π üò∞"
    
    goals_text = "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    if user_data.goals:
        goal_names = [GOAL_DESCRIPTIONS[goal] for goal in user_data.goals if goal in GOAL_DESCRIPTIONS]
        goals_text = ", ".join(goal_names).lower()
    
    notifications_text = "–≤–∫–ª—é—á–µ–Ω—ã" if user_data.notifications.get("enabled", True) else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    ai_mentor_text = "–¥–∞" if user_data.met_ai_mentor else "–Ω–µ—Ç"
    
    text = (
        f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å! "
        f"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Å—Ç—Ä–µ—Å—Å–∞.\n\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        f"üìã **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: {anxiety_text}\n"
        f"‚Ä¢ –¶–µ–ª–∏: {goals_text}\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_text}\n"
        f"‚Ä¢ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º: {ai_mentor_text}\n\n"
        f"üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á! "
        f"–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç—Ä–µ–∫–µ—Ä–æ–º", callback_data="tracker_start_main")]
    ])
    
    # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    user_data.completed = True
    user_data.step = WelcomeState.COMPLETED
    save_user_data(user_data)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_completion(message: types.Message, user_data: TrackerUserData):
    """–®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    await show_step_6_completion(message, user_data)