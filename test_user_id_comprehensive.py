#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å user_id –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
"""

import asyncio
import os
import sys
import tempfile
import json
from unittest.mock import AsyncMock, patch

# Add the project root to Python path  
sys.path.insert(0, '/Users/alexonic/Documents/project/gptbot')

from enhanced_ai_agents import OrchestratorAgent, TaskManagementAgent
from task_database import TaskDatabase

async def test_real_scenario():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Telegram"""
    
    print("üéØ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è Telegram ‚Üí AI Agents")
    print("=" * 60)
    
    temp_db = tempfile.mktemp(suffix='.db')
    
    try:
        # Initialize with real user ID
        real_telegram_id = 602216
        
        print(f"üë§ –ù–∞—Å—Ç–æ—è—â–∏–π Telegram ID: {real_telegram_id}")
        
        # Test the flow: Telegram ‚Üí actions.py ‚Üí orchestrator ‚Üí TaskAgent
        orchestrator = OrchestratorAgent(api_key="test-key", model="gpt-4")
        
        print("\nüìã –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ _handle_general_action —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id")
        print("-" * 50)
        
        # Mock the LangChain agent to simulate what it would do with proper context
        class MockAgentExecutor:
            def __init__(self, agent, tools, verbose=False):
                self.tools = tools
                
            async def ainvoke(self, inputs):
                # Simulate LangChain calling create_task with user_id from system prompt
                input_message = inputs["input"]
                
                # Extract task info from natural language input
                if "—Å–¥–µ–ª–∞—Ç—å –±—ç–∫–ª–æ–≥" in input_message.lower():
                    # Find the create_task tool and call it with proper user_id
                    for tool in self.tools:
                        if tool.name == "create_task":
                            params = {
                                "user_id": real_telegram_id,  # ‚Üê This comes from system prompt context
                                "title": "–°–¥–µ–ª–∞—Ç—å –±—ç–∫–ª–æ–≥",
                                "description": "—Å–∫–≤–æ–∑–Ω–æ–π –±—ç–∫–ª–æ–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏",
                                "priority": "high"
                            }
                            result = tool.func(json.dumps(params))
                            return {"output": result}
                
                return {"output": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å"}
        
        # Patch AgentExecutor with our mock
        with patch('enhanced_ai_agents.AgentExecutor', MockAgentExecutor):
            
            # Simulate the real user message
            user_message = """—Å–¥–µ–ª–∞—Ç—å –±—ç–∫–ª–æ–≥
–æ–ø–∏—Å–∞–Ω–∏–µ: —Å–∫–≤–æ–∑–Ω–æ–π –±—ç–∫–ª–æ–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—ã—Å–æ–∫–∏–π"""
            
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}")
            
            # Route request through orchestrator (this would come from actions.py)
            result = await orchestrator.route_request(real_telegram_id, user_message)
            
            print(f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞:")
            print(f"   –ê–≥–µ–Ω—Ç: {result['agent']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"   –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
            
            # Check if task was created with correct user_id
            db = TaskDatabase(temp_db)
            tasks = db.get_tasks(real_telegram_id)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:")
            print(f"   –ó–∞–¥–∞—á –¥–ª—è user {real_telegram_id}: {len(tasks)}")
            
            if tasks:
                task = tasks[0]
                print(f"   –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: '{task['title']}'")
                print(f"   User ID –≤ –±–∞–∑–µ: {task['user_id']} (—Ç–∏–ø: {type(task['user_id'])})")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}")
                
                if task['user_id'] == real_telegram_id:
                    print("‚úÖ –£–°–ü–ï–•: Task —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id!")
                else:
                    print(f"‚ùå –û–®–ò–ë–ö–ê: user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–æ—Å—å {real_telegram_id}, –ø–æ–ª—É—á–µ–Ω–æ {task['user_id']}")
            else:
                print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # Test task retrieval
            print(f"\nüìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á")
            print("-" * 50)
            
            get_message = "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∏"
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {get_message}")
            
            # Mock for get_tasks  
            class MockGetTasksExecutor:
                def __init__(self, agent, tools, verbose=False):
                    self.tools = tools
                    
                async def ainvoke(self, inputs):
                    for tool in self.tools:
                        if tool.name == "get_tasks":
                            params = {"user_id": real_telegram_id}
                            result = tool.func(json.dumps(params))
                            return {"output": result}
                    return {"output": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏"}
            
            with patch('enhanced_ai_agents.AgentExecutor', MockGetTasksExecutor):
                result2 = await orchestrator.route_request(real_telegram_id, get_message)
                
                print(f"ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:")
                print(f"   –ê–≥–µ–Ω—Ç: {result2['agent']}")
                print(f"   –û—Ç–≤–µ—Ç: {result2['response'][:200]}...")
                
                if "–Ω–µ—Ç –∑–∞–¥–∞—á" in result2['response'].lower():
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                elif "—Å–¥–µ–ª–∞—Ç—å –±—ç–∫–ª–æ–≥" in result2['response'].lower():
                    print("‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    print("‚ö†Ô∏è  –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
        print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("-" * 50)
        
        # Check database state
        all_tasks = db.get_tasks(real_telegram_id)
        wrong_tasks = db.get_tasks(1)  # Check for tasks with wrong user_id
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ó–∞–¥–∞—á –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id ({real_telegram_id}): {len(all_tasks)}")
        print(f"   –ó–∞–¥–∞—á –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ user_id (1): {len(wrong_tasks)}")
        
        if len(all_tasks) > 0 and len(wrong_tasks) == 0:
            print("üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•: –í—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id!")
        elif len(wrong_tasks) > 0:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id")
        else:
            print("‚ö†Ô∏è  –ó–∞–¥–∞—á–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        if os.path.exists(temp_db):
            os.remove(temp_db)

if __name__ == "__main__":
    asyncio.run(test_real_scenario())