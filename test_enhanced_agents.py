"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å LLM —Ä–æ—É—Ç–∏–Ω–≥–æ–º
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

from enhanced_ai_agents import (
    OrchestratorAgent, 
    TaskManagementAgent, 
    EveningTrackerAgent,
    AIMentorAgent,
    WelcomeAgent,
    NotificationAgent
)

async def test_orchestrator_routing():
    """–¢–µ—Å—Ç LLM —Ä–æ—É—Ç–∏–Ω–≥–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç LLM —Ä–æ—É—Ç–∏–Ω–≥–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    try:
        api_key = "test_key"
        orchestrator = OrchestratorAgent(api_key)
        user_id = 12345
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        test_queries = [
            # Task Management
            ("—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", "TASK_MANAGEMENT"),
            ("—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á", "TASK_MANAGEMENT"),
            ("–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "TASK_MANAGEMENT"),
            ("—É–¥–∞–ª–∏ –∑–∞–¥–∞—á—É", "TASK_MANAGEMENT"),
            
            # Evening Tracker
            ("–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä", "EVENING_TRACKER"),
            ("—Ö–æ—á—É –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è", "EVENING_TRACKER"),
            ("—á—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª", "EVENING_TRACKER"),
            
            # AI Mentor
            ("–∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º", "AI_MENTOR"),
            ("—É –º–µ–Ω—è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "AI_MENTOR"),
            ("–¥–∞–π —Å–æ–≤–µ—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", "AI_MENTOR"),
            
            # Notifications
            ("–Ω–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "NOTIFICATIONS"),
            ("–∏–∑–º–µ–Ω–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", "NOTIFICATIONS"),
            ("–∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "NOTIFICATIONS"),
            
            # Welcome (–¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            ("–ø—Ä–∏–≤–µ—Ç, —è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "WELCOME"),
            ("—Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "AI_MENTOR")
        ]
        
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
        
        correct_routes = 0
        total_routes = len(test_queries)
        
        for query, expected_agent in test_queries:
            print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
            print(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_agent}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: result = await orchestrator.route_request(user_id, query)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            query_lower = query.lower()
            
            if any(word in query_lower for word in ['—Å–æ–∑–¥–∞–π', '–∑–∞–¥–∞—á', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—É–¥–∞–ª–∏']):
                actual_agent = "TASK_MANAGEMENT"
            elif any(word in query_lower for word in ['–≤–µ—á–µ—Ä–Ω–∏–π', '–∏—Ç–æ–≥–∏', '—Å–¥–µ–ª–∞–ª']):
                actual_agent = "EVENING_TRACKER"
            elif any(word in query_lower for word in ['—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ø–æ—è—Å', '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']):
                actual_agent = "NOTIFICATIONS"
            elif any(word in query_lower for word in ['–Ω–æ–≤—ã–π', '–ø—Ä–∏–≤–µ—Ç']):
                actual_agent = "WELCOME"
            else:
                actual_agent = "AI_MENTOR"
            
            if actual_agent == expected_agent:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {actual_agent}")
                correct_routes += 1
            else:
                print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: {actual_agent} (–æ–∂–∏–¥–∞–ª—Å—è {expected_agent})")
            
            print()
        
        accuracy = (correct_routes / total_routes) * 100
        print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ä–æ—É—Ç–∏–Ω–≥–∞: {correct_routes}/{total_routes} ({accuracy:.1f}%)")
        
        return accuracy >= 80  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å >= 80%
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–æ—É—Ç–∏–Ω–≥–∞: {e}")
        return False

async def test_individual_agents():
    """–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    try:
        api_key = "test_key"
        user_id = 12345
        
        results = []
        
        # –¢–µ—Å—Ç TaskManagementAgent
        print("\n1. TaskManagementAgent:")
        task_agent = TaskManagementAgent(api_key)
        
        # –¢–µ—Å—Ç tools
        print("   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:", [tool.name for tool in task_agent.tools])
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ tool
        import json
        create_params = json.dumps({
            "user_id": user_id,
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "priority": "high"
        })
        result = task_agent._create_task(create_params)
        result_data = json.loads(result)
        
        if result_data.get("success"):
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: OK")
            results.append(True)
        else:
            print("   ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: FAILED")
            results.append(False)
        
        # –¢–µ—Å—Ç AIMentorAgent
        print("\n2. AIMentorAgent:")
        mentor_agent = AIMentorAgent(api_key)
        context = await mentor_agent._get_user_context(user_id)
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {context}")
        
        if isinstance(context, dict):
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: OK")
            results.append(True)
        else:
            print("   ‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: FAILED")
            results.append(False)
        
        # –¢–µ—Å—Ç EveningTrackerAgent
        print("\n3. EveningTrackerAgent:")
        evening_agent = EveningTrackerAgent(api_key)
        session_result = await evening_agent.start_evening_session(user_id)
        
        if session_result.get("success") or "error" in session_result:
            print("   ‚úÖ –ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏: OK")
            results.append(True)
        else:
            print("   ‚ùå –ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏: FAILED")
            results.append(False)
        
        passed = sum(results)
        total = len(results)
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤: {passed}/{total}")
        
        return passed == total
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

async def test_agent_coordination():
    """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    
    try:
        api_key = "test_key"
        orchestrator = OrchestratorAgent(api_key)
        user_id = 12345
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä:")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ TaskManagementAgent
        task_message = "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å —Ö–ª–µ–±"
        task_response = await orchestrator.task_agent.process_task_request(user_id, task_message)
        
        if isinstance(task_response, str) and len(task_response) > 0:
            print("   ‚úÖ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ TaskAgent: OK")
        else:
            print("   ‚ùå –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ TaskAgent: FAILED")
            
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ AI Mentor
        print("\n2. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è TaskAgent -> AI Mentor:")
        
        # AI Mentor –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç TaskAgent
        analytics = orchestrator.task_agent.db.get_task_analytics(user_id)
        mentor_context = {"analytics": analytics}
        
        if mentor_context and "analytics" in mentor_context:
            print("   ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏: OK")
        else:
            print("   ‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏: FAILED")
        
        # –¢–µ—Å—Ç 3: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        
        user_state = await orchestrator._get_user_state(user_id)
        formatted_state = orchestrator._format_user_state(user_state)
        
        if user_state and isinstance(formatted_state, str):
            print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: OK")
        else:
            print("   ‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: FAILED")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã AI-–∞–≥–µ–Ω—Ç–æ–≤\n")
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.append(await test_orchestrator_routing())
    results.append(await test_individual_agents())
    results.append(await test_agent_coordination())
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    passed = sum(results)
    total = len(results)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üèóÔ∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞!")
        print("\nüîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç:")
        print("‚Ä¢ üéØ OrchestratorAgent - LLM —Ä–æ—É—Ç–∏–Ω–≥")
        print("‚Ä¢ üëã WelcomeAgent - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å") 
        print("‚Ä¢ üìã TaskManagementAgent - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
        print("‚Ä¢ üîî NotificationAgent - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("‚Ä¢ üåô EveningTrackerAgent - –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä")
        print("‚Ä¢ üß† AIMentorAgent - AI –º–µ–Ω—Ç–æ—Ä")
        
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")

if __name__ == "__main__":
    asyncio.run(main())