"""
–¢–µ—Å—Ç AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
sys.path.insert(0, os.getcwd())

from ai_agents import TaskManagerAgent, OrchestratorAgent, get_database

async def test_task_agent_with_sqlite():
    """–¢–µ—Å—Ç TaskManagerAgent —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskManagerAgent —Å SQLite...")
    
    try:
        api_key = "test_key"
        agent = TaskManagerAgent(api_key)
        user_id = 999
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫:")
        message = "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç' —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞)
        db = get_database()
        db.ensure_user_exists(user_id)
        task_id = db.create_task(user_id, "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç", "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "high")
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id[:8]}...")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:")
        tasks = db.get_tasks(user_id)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        for task in tasks:
            print(f"  - {task['title']} ({task['priority']}, {task['status']})")
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        print("\n3. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:")
        analytics = db.get_task_analytics(user_id)
        print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {analytics['total_tasks']}")
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics['completed_tasks']}")
        print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {analytics['completion_rate']}%")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–µ–º –µ—â–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
        print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:")
        additional_tasks = [
            ("–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ", "urgent"),
            ("–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ", "medium"),
            ("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", "high")
        ]
        
        for title, priority in additional_tasks:
            task_id = db.create_task(user_id, title, "", priority)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞: {title} ({priority})")
        
        # –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        print("\n5. –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:")
        final_analytics = db.get_task_analytics(user_id)
        print(f"‚úÖ –ò—Ç–æ–≥–æ –∑–∞–¥–∞—á: {final_analytics['total_tasks']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ TaskManagerAgent: {e}")
        return False

async def test_orchestrator_with_sqlite():
    """–¢–µ—Å—Ç OrchestratorAgent —Å SQLite"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OrchestratorAgent...")
    
    try:
        api_key = "test_key"
        orchestrator = OrchestratorAgent(api_key)
        user_id = 888
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –∑–∞–¥–∞—á?",
            "—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É –∫—É–ø–∏—Ç—å —Ö–ª–µ–±",
            "–ø–æ–∫–∞–∂–∏ –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–Ω–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä"
        ]
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤:")
        for query in test_queries:
            print(f"  –ó–∞–ø—Ä–æ—Å: '{query}'")
            # –ó–¥–µ—Å—å –±—ã –±—ã–ª —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ orchestrator.route_request(user_id, query)
            # –ù–æ –±–µ–∑ API –∫–ª—é—á–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ OrchestratorAgent: {e}")
        return False

def test_database_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = get_database()
        test_user_id = 777
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.ensure_user_exists(test_user_id)
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
        
        # –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π:")
        
        # Create
        task_id = db.create_task(test_user_id, "–¢–µ—Å—Ç –∑–∞–¥–∞—á–∞", "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "medium")
        print(f"‚úÖ CREATE: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ {task_id[:8]}...")
        
        # Read
        tasks = db.get_tasks(test_user_id)
        print(f"‚úÖ READ: –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        
        # Update
        success = db.update_task_status(task_id, test_user_id, "in_progress")
        print(f"‚úÖ UPDATE: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω - {success}")
        
        # Delete  
        success = db.delete_task(task_id, test_user_id)
        print(f"‚úÖ DELETE: –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ - {success}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
        remaining_tasks = db.get_tasks(test_user_id)
        print(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: {len(remaining_tasks)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å SQLite\n")
    
    results = []
    
    # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    results.append(test_database_operations())
    
    # –¢–µ—Å—Ç TaskManagerAgent
    results.append(await test_task_agent_with_sqlite())
    
    # –¢–µ—Å—Ç OrchestratorAgent
    results.append(await test_orchestrator_with_sqlite())
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    passed = sum(results)
    total = len(results)
    print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å SQLite —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")

if __name__ == "__main__":
    asyncio.run(run_all_tests())