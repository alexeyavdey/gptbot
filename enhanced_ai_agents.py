"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å LLM —Ä–æ—É—Ç–∏–Ω–≥–æ–º
–ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ tracker.py —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import yaml
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime, date
import pytz

from langchain_core.tools import Tool
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.output_parsers import StrOutputParser, JsonOutputParser
from langchain.agents import AgentExecutor, create_openai_tools_agent

try:
    from .logger import create_logger
    from .task_database import get_database
    from .tracker import (
        TrackerUserData, TrackerTask, TaskStatus, TaskPriority,
        EveningTrackingSession, EveningSessionState, TaskReviewItem,
        DailySummary, TRACKER_STORAGE
    )
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import logging
    def create_logger(name):
        return logging.getLogger(name)
    
    from task_database import get_database
    
    class TaskStatus:
        PENDING = "pending"
        IN_PROGRESS = "in_progress"
        COMPLETED = "completed"
        CANCELLED = "cancelled"
    
    class TaskPriority:
        LOW = "low"
        MEDIUM = "medium"
        HIGH = "high"
        URGENT = "urgent"

logger = create_logger(__name__)

class BaseAgent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        self.llm = ChatOpenAI(
            api_key=api_key,
            model=model,
            temperature=0.3
        )
        self.db = get_database()
        self.name = self.__class__.__name__
        logger.info(f"Initialized {self.name}")


class WelcomeAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è (6-step onboarding)"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        self.system_prompt = """
        –¢—ã - AI-–∞–≥–µ–Ω—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 6-—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:

        1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        2. –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ 1-5)
        3. –í—ã–±–æ—Ä —Ü–µ–ª–µ–π (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏, —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏)
        4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö)
        5. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º
        6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É

        –ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–º –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.
        –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
    
    async def process_welcome_step(self, user_id: int, current_step: str, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        try:
            prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt + f"\n\n–¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}"),
                ("human", "{message}")
            ])
            
            chain = prompt | self.llm | StrOutputParser()
            response = await chain.ainvoke({"message": message})
            
            return {
                "success": True,
                "response": response,
                "next_step": self._determine_next_step(current_step, message)
            }
        except Exception as e:
            logger.error(f"Error in WelcomeAgent: {e}")
            return {"success": False, "error": str(e)}
    
    def _determine_next_step(self, current_step: str, message: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        step_mapping = {
            "greeting": "anxiety_intro",
            "anxiety_intro": "anxiety_survey", 
            "anxiety_survey": "goals",
            "goals": "notifications",
            "notifications": "ai_mentor",
            "ai_mentor": "completion"
        }
        return step_mapping.get(current_step, "completed")


class TaskManagementAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ (Phase 2 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        self.tools = self._create_tools()
        self.system_prompt = """
        –¢—ã - AI-–∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        
        –¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - –°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–¥–∞—á
        - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        - –ü–æ–º–æ—â—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
        
        –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏:
        - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/—Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: –∏—Å–ø–æ–ª—å–∑—É–π get_tasks
        - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á: –∏—Å–ø–æ–ª—å–∑—É–π create_task
        - –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π get_analytics
        - –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: –∏—Å–ø–æ–ª—å–∑—É–π update_task
        - –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: –∏—Å–ø–æ–ª—å–∑—É–π delete_task
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º user_id.
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á: get_tasks —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {{"user_id": 123}}
        - –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: get_analytics —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {{"user_id": 123}}
        - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: create_task —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {{"user_id": 123, "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "priority": "medium"}}
        
        –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º.
        """
    
    def _create_tools(self) -> List[Tool]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏"""
        return [
            Tool(
                name="create_task",
                description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id, title, description, priority",
                func=self._create_task
            ),
            Tool(
                name="get_tasks",
                description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id, status (optional)",
                func=self._get_tasks
            ),
            Tool(
                name="update_task",
                description="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id, task_id, field, value",
                func=self._update_task
            ),
            Tool(
                name="delete_task",
                description="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id, task_id",
                func=self._delete_task
            ),
            Tool(
                name="get_analytics",
                description="–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id",
                func=self._get_analytics
            ),
            Tool(
                name="filter_tasks",
                description="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: user_id, priority, status",
                func=self._filter_tasks
            )
        ]
    
    def _create_task(self, params: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            title = data['title']
            description = data.get('description', '')
            priority = data.get('priority', 'medium')
            due_date = data.get('due_date')
            
            self.db.ensure_user_exists(user_id)
            task_id = self.db.create_task(user_id, title, description, priority, due_date)
            
            priority_emoji = {'urgent': 'üî•', 'high': '‚ö°', 'medium': 'üìã', 'low': 'üìù'}.get(priority, 'üìã')
            return f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority} {priority_emoji}!"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
    
    def _get_tasks(self, params: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            status = data.get('status')
            
            self.db.ensure_user_exists(user_id)
            tasks = self.db.get_tasks(user_id, status)
            
            if not tasks:
                return "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            if status:
                response = f"–ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}' ({len(tasks)}):\n"
            else:
                response = f"–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({len(tasks)}):\n"
            
            for i, task in enumerate(tasks[:10], 1):
                priority_emoji = {'urgent': 'üî•', 'high': '‚ö°', 'medium': 'üìã', 'low': 'üìù'}.get(task['priority'], 'üìã')
                status_emoji = {'pending': '‚è≥', 'in_progress': 'üîÑ', 'completed': '‚úÖ', 'cancelled': '‚ùå'}.get(task['status'], 'üìã')
                response += f"{i}. {priority_emoji} {task['title']} {status_emoji}\n"
            
            if len(tasks) > 10:
                response += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
            
            return response
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}"
    
    def _update_task(self, params: str) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            task_id = data['task_id']
            field = data['field']
            value = data['value']
            
            if field == 'status':
                success = self.db.update_task_status(task_id, user_id, value)
            elif field == 'priority':
                success = self.db.update_task_priority(task_id, user_id, value)
            else:
                success = False
            
            return json.dumps({
                "success": success,
                "message": f"–ü–æ–ª–µ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ" if success else "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            })
        except Exception as e:
            return json.dumps({"success": False, "error": str(e)})
    
    def _delete_task(self, params: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            task_id = data['task_id']
            
            success = self.db.delete_task(task_id, user_id)
            
            return json.dumps({
                "success": success,
                "message": "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞" if success else "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"
            })
        except Exception as e:
            return json.dumps({"success": False, "error": str(e)})
    
    def _get_analytics(self, params: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            
            self.db.ensure_user_exists(user_id)
            analytics = self.db.get_task_analytics(user_id)
            
            if analytics['total_tasks'] == 0:
                return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á!"
            
            response = f"üìà –í–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {analytics['total_tasks']}\n"
            response += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {analytics['completed_tasks']}\n"
            response += f"‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {analytics['in_progress_tasks']}\n"
            response += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {analytics['pending_tasks']}\n"
            response += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {analytics['completion_rate']:.1f}%\n"
            
            if analytics['completion_rate'] >= 70:
                response += "\nüåü –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            elif analytics['completion_rate'] >= 50:
                response += "\nüëç –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
            else:
                response += "\nüí™ –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
            
            return response
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}"
    
    def _filter_tasks(self, params: str) -> str:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á"""
        try:
            data = json.loads(params)
            user_id = data['user_id']
            priority = data.get('priority')
            status = data.get('status')
            
            self.db.ensure_user_exists(user_id)
            tasks = self.db.get_tasks(user_id, status)
            
            if priority:
                tasks = [t for t in tasks if t['priority'] == priority]
            
            return json.dumps({"success": True, "tasks": tasks})
        except Exception as e:
            return json.dumps({"success": False, "error": str(e)})
    
    async def process_task_request(self, user_id: int, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            logger.info(f"TaskManagementAgent processing: '{message}' for user {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å tools
            prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt + f"\n\n–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç ID –≤–æ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–∞—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."),
                ("human", "{input}"),
                ("placeholder", "{agent_scratchpad}")
            ])
            
            agent = create_openai_tools_agent(self.llm, self.tools, prompt)
            agent_executor = AgentExecutor(agent=agent, tools=self.tools, verbose=True)
            
            result = await agent_executor.ainvoke({"input": message})
            logger.info(f"LangChain agent result: {result}")
            return result.get("output", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
            
        except Exception as e:
            logger.error(f"Error in TaskManagementAgent: {e}")
            import traceback
            logger.error(f"TaskManagementAgent traceback: {traceback.format_exc()}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∑–∞–¥–∞—á–∞–º."


class NotificationAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (Phase 3 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        self.system_prompt = """
        –¢—ã - AI-–∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        
        –¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö)
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–¥–æ–±–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
    
    async def process_notification_request(self, user_id: int, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
        try:
            prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt),
                ("human", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {message}")
            ])
            
            chain = prompt | self.llm | StrOutputParser()
            response = await chain.ainvoke({"message": message})
            
            return response
        except Exception as e:
            logger.error(f"Error in NotificationAgent: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º."


class EveningTrackerAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ (Phase 4 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        self.system_prompt = """
        –¢—ã - AI-–∞–≥–µ–Ω—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.
        
        –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
        - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–µ—Å—Å–∏–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        - –û–±–∑–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ –¥–µ–Ω—å
        - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        - –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        - –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        
        –ü—Ä–∏–Ω—Ü–∏–ø—ã:
        - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—É–∂–¥–∞–π, –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π
        - –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –∞ –Ω–µ –Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        - –°–æ–∑–¥–∞–≤–∞–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        - –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
        
        –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ —ç–º–ø–∞—Ç–∏–µ–π.
        """
    
    async def start_evening_session(self, user_id: int) -> Dict[str, Any]:
        """–ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks = self.db.get_tasks(user_id, 'pending') + self.db.get_tasks(user_id, 'in_progress')
            
            if not tasks:
                return {
                    "success": False,
                    "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±–∑–æ—Ä–∞"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è —Å–µ–≥–æ–¥–Ω—è
            today = date.today().strftime("%Y-%m-%d")
            
            return {
                "success": True,
                "tasks_count": len(tasks),
                "message": f"–ù–∞—á–∏–Ω–∞–µ–º –≤–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä {len(tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
            }
        except Exception as e:
            logger.error(f"Error starting evening session: {e}")
            return {"success": False, "error": str(e)}
    
    async def process_evening_message(self, user_id: int, message: str, session_state: str = "starting") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt + f"\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {session_state}"),
                ("human", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {message}")
            ])
            
            chain = prompt | self.llm | StrOutputParser()
            response = await chain.ainvoke({"message": message})
            
            return response
        except Exception as e:
            logger.error(f"Error in evening tracker: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≤–µ—á–µ—Ä–Ω–µ–π —Å–µ—Å—Å–∏–∏."


class AIMentorAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –º–µ–Ω—Ç–æ—Ä–∞ —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        self.system_prompt = """
        –¢—ã - AI-–º–µ–Ω—Ç–æ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞.
        
        –¢–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å—é
        - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        - –ë–æ—Ä—å–±–∞ —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        - –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏
        
        –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        - –î–Ω–µ–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        - –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.
        –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        """
    
    async def chat_with_mentor(self, user_id: int, message: str, context: Dict = None) -> str:
        """–ß–∞—Ç —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not context:
                context = await self._get_user_context(user_id)
            
            context_str = self._format_context(context)
            
            prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt + f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{context_str}"),
                ("human", "{message}")
            ])
            
            chain = prompt | self.llm | StrOutputParser()
            response = await chain.ainvoke({"message": message})
            
            return response
        except Exception as e:
            logger.error(f"Error in AI Mentor: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –º–µ–Ω—Ç–æ—Ä–æ–º."
    
    async def _get_user_context(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks = self.db.get_tasks(user_id)
            analytics = self.db.get_task_analytics(user_id)
            
            # –°–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç None
            total_tasks = analytics.get('total_tasks', 0)
            if total_tasks is None or not isinstance(total_tasks, (int, float)):
                total_tasks = 0
                
            completion_rate = analytics.get('completion_rate', 0)
            if completion_rate is None or not isinstance(completion_rate, (int, float)):
                completion_rate = 0
            
            return {
                "total_tasks": int(total_tasks),
                "completion_rate": float(completion_rate),
                "recent_tasks": tasks[:5] if tasks else []
            }
        except Exception as e:
            logger.error(f"Error getting user context: {e}")
            return {}
    
    def _format_context(self, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not context:
            return "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        formatted = f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {context.get('total_tasks', 0)}\n"
        formatted += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {context.get('completion_rate', 0):.1f}%\n"
        
        if context.get('recent_tasks'):
            formatted += "–ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n"
            for task in context['recent_tasks']:
                formatted += f"- {task['title']} ({task['status']})\n"
        
        return formatted


class OrchestratorAgent(BaseAgent):
    """AI-–∞–≥–µ–Ω—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å LLM —Ä–æ—É—Ç–∏–Ω–≥–æ–º"""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        super().__init__(api_key, model)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
        self.welcome_agent = WelcomeAgent(api_key, model)
        self.task_agent = TaskManagementAgent(api_key, model)
        self.notification_agent = NotificationAgent(api_key, model)
        self.evening_agent = EveningTrackerAgent(api_key, model)
        self.mentor_agent = AIMentorAgent(api_key, model)
        
        self.system_prompt = """
        –¢—ã - AI-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
        –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.

        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:
        1. WELCOME - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (6 —à–∞–≥–æ–≤)
        2. TASK_MANAGEMENT - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
        3. NOTIFICATIONS - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        4. EVENING_TRACKER - –≤–µ—á–µ—Ä–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –æ–±–∑–æ—Ä–∞ –¥–Ω—è
        5. AI_MENTOR - –æ–±—â–µ–Ω–∏–µ —Å AI-–º–µ–Ω—Ç–æ—Ä–æ–º, —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–µ—Ä–∏ –û–î–ò–ù –∞–≥–µ–Ω—Ç.
        –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: {{"agent": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–≥–µ–Ω—Ç–∞", "confidence": 0.95, "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}}
        """
    
    async def route_request(self, user_id: int, message: str, user_state: Dict = None) -> Dict[str, Any]:
        """LLM —Ä–æ—É—Ç–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –∞–≥–µ–Ω—Ç—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if not user_state:
                user_state = await self._get_user_state(user_id)
            
            state_context = self._format_user_state(user_state)
            
            # LLM —Ä–æ—É—Ç–∏–Ω–≥
            routing_prompt = ChatPromptTemplate.from_messages([
                ("system", self.system_prompt + f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{state_context}"),
                ("human", "{message}")
            ])
            
            chain = routing_prompt | self.llm | JsonOutputParser()
            routing_result = await chain.ainvoke({"message": message})
            
            agent_name = routing_result.get("agent", "AI_MENTOR")
            confidence = routing_result.get("confidence", 0.5)
            reasoning = routing_result.get("reasoning", "")
            
            logger.info(f"Routing: {agent_name} (confidence: {confidence}) - {reasoning}")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            response = await self._delegate_to_agent(agent_name, user_id, message, user_state)
            
            return {
                "agent": agent_name,
                "confidence": confidence,
                "reasoning": reasoning,
                "response": response
            }
            
        except Exception as e:
            logger.error(f"Error in orchestrator routing: {e}")
            # Fallback –∫ AI-–º–µ–Ω—Ç–æ—Ä—É
            response = await self.mentor_agent.chat_with_mentor(user_id, message)
            return {
                "agent": "AI_MENTOR",
                "confidence": 0.1,
                "reasoning": "Fallback –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞",
                "response": response
            }
    
    async def _delegate_to_agent(self, agent_name: str, user_id: int, message: str, user_state: Dict) -> str:
        """–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É"""
        try:
            if agent_name == "WELCOME":
                current_step = user_state.get('welcome_step', 'greeting')
                result = await self.welcome_agent.process_welcome_step(user_id, current_step, message)
                return result.get('response', '–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ')
                
            elif agent_name == "TASK_MANAGEMENT":
                return await self.task_agent.process_task_request(user_id, message)
                
            elif agent_name == "NOTIFICATIONS":
                return await self.notification_agent.process_notification_request(user_id, message)
                
            elif agent_name == "EVENING_TRACKER":
                session_state = user_state.get('evening_state', 'starting')
                return await self.evening_agent.process_evening_message(user_id, message, session_state)
                
            elif agent_name == "AI_MENTOR":
                return await self.mentor_agent.chat_with_mentor(user_id, message, user_state)
                
            else:
                # Fallback –∫ AI-–º–µ–Ω—Ç–æ—Ä—É
                return await self.mentor_agent.chat_with_mentor(user_id, message, user_state)
                
        except Exception as e:
            logger.error(f"Error delegating to {agent_name}: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    
    async def _get_user_state(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã/—Ñ–∞–π–ª–æ–≤
            # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            analytics = self.db.get_task_analytics(user_id)
            logger.info(f"FIXED_VERSION: Raw analytics for user {user_id}: {analytics}")
            
            # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç None –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
            total_tasks = analytics.get('total_tasks', 0)
            if total_tasks is None or not isinstance(total_tasks, (int, float)):
                total_tasks = 0
                
            completed_tasks = analytics.get('completed_tasks', 0)
            if completed_tasks is None or not isinstance(completed_tasks, (int, float)):
                completed_tasks = 0
            
            logger.debug(f"Processed values - total_tasks: {total_tasks} (type: {type(total_tasks)}), completed_tasks: {completed_tasks} (type: {type(completed_tasks)})")
            
            active_tasks = int(total_tasks) - int(completed_tasks)
            logger.debug(f"Calculated active_tasks: {active_tasks}")
            
            return {
                "welcome_completed": True,  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ tracker_data.yaml
                "total_tasks": total_tasks,
                "active_tasks": active_tasks,
                "completion_rate": analytics.get('completion_rate', 0) or 0,
                "evening_state": "starting",  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                "welcome_step": "completed"
            }
        except Exception as e:
            logger.error(f"Error getting user state: {e}")
            import traceback
            logger.error(f"Full traceback: {traceback.format_exc()}")
            return {}
    
    def _format_user_state(self, user_state: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not user_state:
            return "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        formatted = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å: {'–∑–∞–≤–µ—Ä—à–µ–Ω' if user_state.get('welcome_completed') else '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}\n"
        formatted += f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {user_state.get('total_tasks', 0)}\n"
        formatted += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {user_state.get('active_tasks', 0)}\n"
        formatted += f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {user_state.get('completion_rate', 0):.1f}%\n"
        
        return formatted


# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def initialize_enhanced_agents(api_key: str, model: str = "gpt-4") -> OrchestratorAgent:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        orchestrator = OrchestratorAgent(api_key, model)
        logger.info("Enhanced AI agents system initialized successfully")
        return orchestrator
    except Exception as e:
        logger.error(f"Error initializing enhanced agents: {e}")
        raise