#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–¥–∞—á
"""

import uuid
import time

# –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TaskStatus:
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class TaskPriority:
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"

class TrackerTask:
    def __init__(self, title: str, description: str = "", priority: str = TaskPriority.MEDIUM):
        self.id = str(uuid.uuid4())
        self.title = title
        self.description = description
        self.priority = priority
        self.status = TaskStatus.PENDING
        self.created_at = int(time.time())
        self.updated_at = int(time.time())
        self.due_date = None
        self.completed_at = None
    
    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'priority': self.priority,
            'status': self.status,
            'created_at': self.created_at,
            'updated_at': self.updated_at,
            'due_date': self.due_date,
            'completed_at': self.completed_at
        }

class TrackerUserData:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.tasks = []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_task(user_data: TrackerUserData, title: str, description: str = "", priority: str = TaskPriority.MEDIUM):
    task = TrackerTask(title, description, priority)
    user_data.tasks.append(task)
    return task

def get_task_by_id(user_data: TrackerUserData, task_id: str):
    for task in user_data.tasks:
        if task.id == task_id:
            return task
    return None

def update_task_status(user_data: TrackerUserData, task_id: str, new_status: str):
    task = get_task_by_id(user_data, task_id)
    if task:
        task.status = new_status
        task.updated_at = int(time.time())
        if new_status == TaskStatus.COMPLETED:
            task.completed_at = int(time.time())
        return True
    return False

def get_tasks_by_status(user_data: TrackerUserData, status: str):
    return [task for task in user_data.tasks if task.status == status]

def test_tracker_functions():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–∫–µ—Ä–∞"""
    print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–∫–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = TrackerUserData(123)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    task1 = create_task(user_data, "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1", "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", TaskPriority.HIGH)
    assert task1.title == "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1"
    assert task1.priority == TaskPriority.HIGH
    assert task1.status == TaskStatus.PENDING
    assert len(user_data.tasks) == 1
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID
    print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID...")
    found_task = get_task_by_id(user_data, task1.id)
    assert found_task is not None
    assert found_task.title == "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1"
    
    not_found = get_task_by_id(user_data, "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π-id")
    assert not_found is None
    print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...")
    result = update_task_status(user_data, task1.id, TaskStatus.IN_PROGRESS)
    assert result == True
    assert task1.status == TaskStatus.IN_PROGRESS
    
    result = update_task_status(user_data, task1.id, TaskStatus.COMPLETED)
    assert result == True
    assert task1.status == TaskStatus.COMPLETED
    assert task1.completed_at is not None
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
    print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á...")
    task2 = create_task(user_data, "–ó–∞–¥–∞—á–∞ 2", "", TaskPriority.LOW)
    task3 = create_task(user_data, "–ó–∞–¥–∞—á–∞ 3", "", TaskPriority.URGENT)
    
    assert len(user_data.tasks) == 3
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É...")
    update_task_status(user_data, task2.id, TaskStatus.IN_PROGRESS)
    
    pending_tasks = get_tasks_by_status(user_data, TaskStatus.PENDING)
    in_progress_tasks = get_tasks_by_status(user_data, TaskStatus.IN_PROGRESS)
    completed_tasks = get_tasks_by_status(user_data, TaskStatus.COMPLETED)
    
    assert len(pending_tasks) == 1  # task3
    assert len(in_progress_tasks) == 1  # task2
    assert len(completed_tasks) == 1  # task1
    print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 6: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\n6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    task_dict = task1.to_dict()
    assert 'id' in task_dict
    assert 'title' in task_dict
    assert task_dict['title'] == "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1"
    assert task_dict['status'] == TaskStatus.COMPLETED
    print("‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(user_data.tasks)}")
    print(f"   ‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {len(pending_tasks)}")
    print(f"   ‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {len(in_progress_tasks)}")
    print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {len(completed_tasks)}")

if __name__ == "__main__":
    test_tracker_functions()